[{"title":"Comprendre l'architecture du Web: un guide sur le fonctionnement d'Internet","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/fondations/architecture-web","content":"","keywords":""},{"title":"Que se passe-t-il lorsque nous essayons d'accéder à un site Web​","type":1,"pageTitle":"Comprendre l'architecture du Web: un guide sur le fonctionnement d'Internet","url":"/notebook-SNCF-P3/docs/fondations/architecture-web#que-se-passe-t-il-lorsque-nous-essayons-daccéder-à-un-site-web","content":"Nous savons que le code de notre site Web n'est pas stocké sur notre ordinateur. Nous devons introduire le code dans notre ordinateur ou navigateur où il est conservé pour visiter le site Web. Comment cela se produit-il?  Le processus est assez simple. Lorsque nous entrons une URL dans notre navigateur, le navigateur envoie une demande de données nécessaires au serveur. Le serveur répond ensuite en renvoyant le code et les données du site. Le navigateur interprète les codes et affiche le site Web à consulter. Ce processus est connu sous le nom de demande-réponse architecture de modèle ou de serveur client. "},{"title":"Que sont les clients et les serveurs?​","type":1,"pageTitle":"Comprendre l'architecture du Web: un guide sur le fonctionnement d'Internet","url":"/notebook-SNCF-P3/docs/fondations/architecture-web#que-sont-les-clients-et-les-serveurs","content":"Les clients sont ces appareils connectés à Internet, comme nos téléphones ou ordinateurs connectés au réseau mobile ou au wi-fi. Le client est l'endroit où se déroule toute l'interaction utilisateur. Dans le contexte du Web, un client est généralement un logiciel d'accès au Web comme un navigateur, tel que Chrome, Firefox ou Safari, qui demande des pages Web et d'autres ressources à partir d'un serveur. Le navigateur Web ( client ) reçoit le code du site Web, puis le rend à l'utilisateur pour le visualiser. Bien que nous accédions au site Web à partir du navigateur, nous pouvons traiter l'ensemble de l'appareil comme un client de l'architecture client-serveur. À l'autre extrémité du spectre se trouvent des serveurs, des ordinateurs spécialisés conçus pour stocker et gérer des données, des sites Web et des applications Web. Ces serveurs sont appelés tels car ils servent du code ou des données en réponse aux demandes des clients. Un serveur attend que les demandes arrivent des clients, traite la demande, puis renvoie les informations demandées. Il existe différents types de serveurs, tels que les serveurs Web, les serveurs de fichiers et les serveurs de base de données, chacun avec sa fonction spécifique. Dans cet article, nous nous concentrerons principalement sur les serveurs Web. "},{"title":"Qu'est-ce qu'une URL et comment est-elle résolue?​","type":1,"pageTitle":"Comprendre l'architecture du Web: un guide sur le fonctionnement d'Internet","url":"/notebook-SNCF-P3/docs/fondations/architecture-web#quest-ce-quune-url-et-comment-est-elle-résolue","content":"Une URL ( Uniform Resource Locator ) est une chaîne de caractères qui spécifie l'emplacement d'une ressource sur Internet. Les URL sont utilisées pour identifier et localiser des pages Web, des images, des vidéos et d'autres ressources sur le World Wide Web. Les URL contiennent généralement plusieurs parties, y compris un protocole, un nom de domaine et un chemin. parties d'URL  Le protocole est la méthode utilisée pour transférer des données sur Internet. Le protocole le plus utilisé pour le Web est HTTP ( Hypertext Transfer Protocol ) ou HTTPS ( HTTP Secure ), une version plus sécurisée de HTTP qui crypte les données pour plus de sécurité. Le nom de domaine est le nom unique qui identifie un site Web ou un serveur Web sur Internet. Pour accéder à un site Web, le nom est saisi dans la barre d'adresse du navigateur. Par exemple, “ github.com ” est le nom de domaine du site Web de Github. Le chemin indique l'emplacement de la ressource au sein du serveur. Cette partie URL comprend généralement le nom de fichier ou le dossier contenant la ressource, tel que “ à propos de ” ou “ contact. ” Par exemple, “ github.com/about ” est le chemin d'accès à la page du site Web “ github.com. ” Facultativement, l'URL peut également inclure une chaîne de requête, un ensemble de caractères ajoutés à la fin de l'URL qui contient des informations ou des paramètres supplémentaires pour la ressource.  Il est intéressant de noter que le nom de domaine que nous entrons dans le navigateur n'est pas l'adresse physique réelle du site Web. Chaque site Web et appareil connecté à Internet a une adresse IP unique, une étiquette numérique souvent difficile à retenir. Pour le rendre plus facile à retenir, nous utilisons des noms de domaine. Lorsqu'une URL est entrée, le navigateur envoie d'abord une demande au serveur DNS ( Domain Name System ), qui correspond au nom de domaine à l'adresse IP correspondante du site Web. C'est ce qu'on appelle DNS Lookup. Ce processus est facilité par votre fournisseur de services Internet et renvoie l'adresse IP, y compris le numéro de port du serveur accessible. "},{"title":"Établissement de protocoles​","type":1,"pageTitle":"Comprendre l'architecture du Web: un guide sur le fonctionnement d'Internet","url":"/notebook-SNCF-P3/docs/fondations/architecture-web#établissement-de-protocoles","content":"Lorsque nous entrons une adresse Web et obtenons l'adresse IP réelle du site Web dans le navigateur, une connexion connue sous le nom de socket TCP / IP est établie entre le navigateur et le serveur. Cette connexion reste active pendant le transfert de fichiers du serveur vers le client.  TCP ( Transmission Control Protocol ) et IP ( Internet Protocol ) sont deux des principaux protocoles qui composent la suite du protocole Internet ( IP ). Ensemble, ils jettent les bases de la communication sur Internet. TCP ( Transmission Control Protocol ) est l'un des principaux protocoles de la suite de protocoles Internet ( TCP / IP ), qui est utilisé pour établir et maintenir des connexions entre les appareils sur un réseau. La fonction principale de TCP est d'assurer la livraison fiable des données entre les appareils.  TCP décompose les données en petits morceaux appelés paquets avant leur envoi sur le réseau. Chaque paquet est étiqueté avec un en-tête TCP, qui comprend les numéros de port source et de destination, et un en-tête IP qui se compose des adresses IP source et de destination, pour l'identifier. Chaque paquet contient également un numéro de séquence qui permet au dispositif récepteur de remonter les paquets dans le bon ordre. Si un paquet est perdu ou corrompu pendant la transmission, TCP retransmettra automatiquement le paquet pour s'assurer que tous les paquets sont reçus correctement. Ce protocole fournit également un contrôle des flux et un contrôle de la congestion. Le contrôle des flux garantit que l'expéditeur ne submerge pas le récepteur en envoyant trop de données à la fois, et le contrôle de la congestion garantit que le réseau ne devient pas trop chargé par trop de trafic. Il s'agit d'un protocole orienté connexion qui établit une connexion virtuelle entre l'expéditeur et le récepteur avant d'échanger des données. Une fois la connexion établie, les deux parties peuvent échanger des données de manière fiable et ordonnée. TCP est largement utilisé dans de nombreuses applications, notamment la navigation sur le Web, le courrier électronique, le transfert de fichiers et les jeux en ligne. Il s'agit d'un protocole fiable et efficace qui garantit que les données sont fournies correctement et dans le bon ordre, ce qui en fait une partie essentielle de l'infrastructure Internet. De l'autre côté, IP adresse et achemine les paquets entre les appareils d'un réseau. Il attribue une adresse IP unique à chaque appareil connecté à Internet. Lorsque les données sont envoyées d'un appareil à un autre, le protocole IP détermine l'adresse de destination et le meilleur itinéraire pour les données à prendre. Son travail consiste à envoyer et à acheminer tous les paquets via Internet. TCP et IP travaillent ensemble pour fournir une communication fiable et efficace sur Internet. IP adresse et achemine les paquets de données, tandis que TCP garantit que les données sont fournies correctement et dans le bon ordre. Il s'agit de protocoles de communication ou du système de contrôle des fondamentaux d'Internet qui définit et définit les règles de déplacement des données sur le Web. Le protocole de communication fixe les règles de communication de deux ou plusieurs parties en leur sein. Une fois la connexion établie, le processus de communication commence par une requête HTTP envoyée depuis le navigateur. HTTP, ou Hypertext Transfer Protocol (protocole de transfert hypertexte), est le protocole standard de transmission de données sur Internet et est l'épine dorsale du World Wide Web. Il permet au navigateur d'envoyer des demandes à un serveur Web et de recevoir la réponse du serveur. HTTP est basé sur un modèle de réponse à une demande dont nous avons discuté précédemment, dans lequel un client ( tel qu'un navigateur Web ) envoie une demande à un serveur, et le serveur envoie une réponse.  Les requêtes HTTP comporte différentes parties, qui incluent la ligne de départ ( Méthode HTTP + cible de demande + Version HTTP ), en-tête de requête HTTP et corps de demande. Les méthodes HTTP les plus courantes sont GET, qui demande une ressource au serveur, et POST, qui envoie des données au serveur à traiter. Il existe également des méthodes PUT et Patch qui sont utilisées pour modifier les données. HTTP se trouve au-dessus de la pile de protocoles TCP / IP. Il est généralement utilisé avec les protocoles SSL / TLS ( Secure Sockets Layer / Transport Layer Security ) pour fournir une communication sécurisée et cryptée sur Internet. Lorsque le serveur reçoit la demande, il la traite et renvoie une réponse HTTP. La réponse HTTP est composée de plusieurs parties: La ligne de démarrage comprend la version HTTP, le code d'état et le message. La version HTTP indique la version du protocole HTTP utilisée. Le code d'état est un code numérique à trois chiffres qui indique le résultat de la demande. Le message d'état est une brève description textuelle du code d'état. L'en-tête de réponse HTTP contient des informations supplémentaires sur la réponse, telles que le type de contenu dans le corps de réponse, la date et l'heure d'envoi de la réponse et le nom du serveur. Le corps de réponse contient les données réelles ou le fichier HTML qui ont été demandés. Le développeur principal est responsable de la spécification des données incluses dans l'en-tête de réponse. Ces données peuvent inclure des éléments tels que le type de contenu, la date et l'heure et le nom du serveur. Dans le corps de réponse, nous obtenons les données ou le fichier HTML demandés dans la demande d'origine. Si le serveur ne peut pas localiser la page demandée, il enverra un message d'erreur HTTP 404 indiquant que la page n'a pas pu être trouvée.  "},{"title":"Que se passe-t-il ensuite après que notre navigateur a reçu la réponse?​","type":1,"pageTitle":"Comprendre l'architecture du Web: un guide sur le fonctionnement d'Internet","url":"/notebook-SNCF-P3/docs/fondations/architecture-web#que-se-passe-t-il-ensuite-après-que-notre-navigateur-a-reçu-la-réponse","content":" Lorsqu'un navigateur Web reçoit un document HTML ( Hypertext Markup Language ) d'un serveur Web, il analyse le document pour le convertir en une représentation visuelle qui peut être affichée à l'utilisateur. Le processus d'analyse d'un document HTML comprend les étapes suivantes: Le navigateur commence par lire le code HTML de haut en bas, ligne par ligne. En lisant le code, le navigateur recherche des balises, qui sont utilisées pour définir la structure et la mise en page du document. Par exemple, la balise &lt; html &gt; indique le début d'un document HTML, et les balises &lt; head &gt; et &lt; body &gt; indiquent le début des sections tête et corps du document, respectivement. Le navigateur comprend comment interpréter le code par un algorithme d'analyse HTML. Lorsque le navigateur rencontre des balises, il crée des éléments correspondants dans le modèle d'objet de document ( DOM ), une représentation arborescente du document HTML. Le navigateur l'utilise pour comprendre comment la page doit être rendue et affichée. Chaque élément du DOM correspond à une seule balise dans le code HTML, et nous pouvons manipuler ces éléments en scriptant un langage comme JavaScript.  Le navigateur analyse le document pour des actifs supplémentaires afin de rendre la page correctement. Ces actifs peuvent inclure des fichiers CSS, des fichiers JavaScript, des images et d'autres fichiers multimédias. Lorsque le navigateur rencontre une référence à un actif dans le document HTML, il envoie une demande supplémentaire au serveur pour récupérer cet actif. Le navigateur répétera ce processus pour chaque actif qu'il rencontre. Par exemple, si le document HTML est lié. Pour un fichier CSS, le navigateur demandera au serveur de récupérer ce fichier. Le fichier CSS sera ensuite analysé et utilisé pour appliquer les styles visuels aux éléments définis dans le HTML. De même, s'il y a des images sur la page, le navigateur enverra une demande au serveur pour chaque image et les rendra sur la page. Il est important de noter que le navigateur ne téléchargera et n'analysera que les actifs nécessaires pour la fenêtre actuelle ou la partie visible de la page Web. C'est ce qu'on appelle le chargement paresseux. Lorsque l'utilisateur fait défiler la page, le navigateur téléchargera et analysera les actifs supplémentaires au besoin. Ce téléchargement et cette analyse d'actifs supplémentaires peuvent avoir un impact sur les performances de la page Web, car cela peut prendre du temps pour récupérer et traiter ces fichiers. Par conséquent,les développeurs doivent optimiser le chargement de ces actifs pour garantir que la page se charge rapidement et efficacement. Il est important de comprendre que HTML ne fournit pas d'informations sur la façon dont un site Web doit apparaître visuellement. Il définit uniquement la structure et indique au navigateur les différentes parties du contenu, comme les en-têtes, les images et les paragraphes. CSS ( Feuilles de style en cascade ) fournit des informations de style visuel et de présentation pour une page Web. CSS permet aux développeurs de spécifier la police, la couleur, la taille et la position des éléments sur une page Web, ainsi que d'autres propriétés visuelles. CSS peut être lié à un document HTML et sera utilisé pour appliquer les styles aux éléments définis dans le HTML. Le navigateur utilise également JavaScript pour ajouter des fonctionnalités dynamiques aux pages Web, comme la validation de formulaire et les éléments interactifs. Une fois le processus d'analyse terminé, le navigateur rend la représentation visuelle du document HTML, avec laquelle l'utilisateur peut interagir et afficher dans la fenêtre du navigateur. Le processus d'analyse est complexe, mais il est effectué rapidement et efficacement par des navigateurs Web modernes, permettant aux utilisateurs d'interagir de manière transparente avec les pages Web. Après tout analyser, la connexion est fermée. C'est tout pour l'instant! Cependant, de nombreux autres processus et technologies complexes font fonctionner Internet. Cet article devrait vous donner un aperçu des parties essentielles du Web, mais gardez à l'esprit qu'il y a beaucoup plus à apprendre et à explorer dans le domaine du Web. Bonne apprentissage! Article original en anglaisEcris par Faisal@thefaisal. "},{"title":"Commencer avec Angular","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/front-end/angular/get-started","content":"","keywords":""},{"title":"Prérequis​","type":1,"pageTitle":"Commencer avec Angular","url":"/notebook-SNCF-P3/docs/front-end/angular/get-started#prérequis","content":"Pour suivre ce tutoriel, vous devez avoir une connaissance de base des technologies suivantes : HTMLJavaScriptTypeScript "},{"title":"Faisons un focus sur notre objectif final​","type":1,"pageTitle":"Commencer avec Angular","url":"/notebook-SNCF-P3/docs/front-end/angular/get-started#faisons-un-focus-sur-notre-objectif-final","content":"Vous construisez des applications Angular avec des composants. Les composants définissent les zones de responsabilité dans l'interface utilisateur qui vous permettent de réutiliser des ensembles de fonctionnalités d'interface utilisateur. Un composant se compose de trois éléments : Partie du composant\tDescriptionClass\tGère les données et les fonctionnalités Template HTML\tLe HTML qui définit l'interface utilisateur. Style\tDéfinit ... le style ! Dans ce tuto vous allez créer une application avec les différents composants suivants : Composant\tDescription&lt;app-root&gt;\tLe composant racine qui contient tous les autres composants. &lt;app-top-bar&gt;\tLa barre de navigation. &lt;app-product-list&gt;\tLa liste des produits. &lt;app-product-alerts&gt;\tLes alertes de produits. Rendu final de l'appli Voici une base pour pouvoir suivre ce tutoriel : Ne cherche pas à comprendre dès maintenant le role de chaque fichier, nous allons les détailler ensemble après cette prise en main. Essaye pour le moment de suivre les indications et de comprendre ce que cela produit comme résultat. Prend des notes au fur et à mesure et n'hésite pas à poser des questions. 📁 Projet de base pour commencer le tuto (pense à lire le README 😉) Mais surtout n'oublie pas de t'amuser ! 😄 "},{"title":"Partie 4 - Les formulaires pour la saisie des données par l'utilisateur","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/front-end/angular/form-user-input","content":"","keywords":""},{"title":"Définir le modèle de formulaire de caisse​","type":1,"pageTitle":"Partie 4 - Les formulaires pour la saisie des données par l'utilisateur","url":"/notebook-SNCF-P3/docs/front-end/angular/form-user-input#définir-le-modèle-de-formulaire-de-caisse","content":"Cette étape vous montre comment configurer le modèle de formulaire de caisse dans la classe du composant. Le modèle de formulaire détermine le statut du formulaire. Ouvrez le fichier cart.component.ts. Importez le service FormBuilder à partir du package @angular/forms. Ce service fournit des méthodes pratiques pour générer des contrôles (les éléments permettant de composer un formulaire). src/app/cart/cart.component.ts import { Component } from &quot;@angular/core&quot;; import { FormBuilder } from &quot;@angular/forms&quot;; import { CartService } from &quot;../cart.service&quot;;  Injectez le service FormBuilder dans le constructor() de CartComponent. Ce service fait partie du module ReactiveFormsModule, que vous avez déjà importé ou qui a déjà été importé pour vous dans le projet (dans app.module.ts). src/app/cart/cart.component.ts export class CartComponent { constructor( private cartService: CartService, private formBuilder: FormBuilder ) {} }  Pour collecter le nom et l'adresse de l'utilisateur, utilisez la méthode group() de FormBuilder pour définir la propriété checkoutForm sur un modèle de formulaire contenant : un champ address et champs name. src/app/cart/cart.component.ts export class CartComponent { items = this.cartService.getItems(); checkoutForm = this.formBuilder.group({ name: &quot;&quot;, address: &quot;&quot;, }); constructor( private cartService: CartService, private formBuilder: FormBuilder ) {} }  Définissez une méthode onSubmit() pour traiter le formulaire. Cette méthode permet aux utilisateurs de soumettre leur nom et leur adresse. De plus, cette méthode utilise la méthode clearCart() du CartService pour réinitialiser le formulaire et vider le panier. L'ensemble de la classe de composants de panier se présente comme suit : src/app/cart/cart.component.ts import { Component } from &quot;@angular/core&quot;; import { FormBuilder } from &quot;@angular/forms&quot;; import { CartService } from &quot;../cart.service&quot;; @Component({ selector: &quot;app-cart&quot;, templateUrl: &quot;./cart.component.html&quot;, styleUrls: [&quot;./cart.component.css&quot;], }) export class CartComponent { items = this.cartService.getItems(); checkoutForm = this.formBuilder.group({ name: &quot;&quot;, address: &quot;&quot;, }); constructor( private cartService: CartService, private formBuilder: FormBuilder ) {} onSubmit(): void { // Traiter les données de paiement ici this.items = this.cartService.clearCart(); console.warn(&quot;Votre commande a été envoyée&quot;, this.checkoutForm.value); this.checkoutForm.reset(); } }   "},{"title":"Créez le formulaire de commande​","type":1,"pageTitle":"Partie 4 - Les formulaires pour la saisie des données par l'utilisateur","url":"/notebook-SNCF-P3/docs/front-end/angular/form-user-input#créez-le-formulaire-de-commande","content":"Suivez les étapes suivantes pour ajouter un formulaire de paiement au bas de la vue du panier. Au bas de cart.component.html, ajoutez un élément HTML &lt;form&gt; et un bouton Acheter. Utilisez la propriété formGroup pour lier checkoutForm à la balise HTML &lt;form&gt;. src/app/cart/cart.component.html &lt;form [formGroup]=&quot;checkoutForm&quot;&gt; &lt;button class=&quot;button&quot; type=&quot;submit&quot;&gt;Purchase&lt;/button&gt; &lt;/form&gt;  Sur la balise &lt;form&gt;, utilisez l'événement ngSubmit pour écouter la soumission du formulaire et appelez la méthode onSubmit() avec la valeur checkoutForm . src/app/cart/cart.component.html &lt;form [formGroup]=&quot;checkoutForm&quot; (ngSubmit)=&quot;onSubmit()&quot;&gt;&lt;/form&gt;  Ajoutez des champs &lt;input&gt; pour le nom et l'adresse, chacun avec un attribut formControlName qui permet la liaison avec les propriétés du aux formulaire checkoutForm (déclaré dans le .ts). Le composant complet est le suivant : src/app/cart/cart.component.html &lt;h3&gt;Panier&lt;/h3&gt; &lt;p&gt; &lt;a routerLink=&quot;/shipping&quot;&gt;Prix d'expédition&lt;/a&gt; &lt;/p&gt; &lt;div class=&quot;cart-item&quot; *ngFor=&quot;let item of items&quot;&gt; &lt;span&gt;{{ item.name }} &lt;/span&gt; &lt;span&gt;{{ item.price | currency }}&lt;/span&gt; &lt;/div&gt; &lt;form [formGroup]=&quot;checkoutForm&quot; (ngSubmit)=&quot;onSubmit()&quot;&gt; &lt;div&gt; &lt;label for=&quot;nameInput&quot;&gt; Nom &lt;/label&gt; &lt;input id=&quot;nameInput&quot; type=&quot;text&quot; formControlName=&quot;name&quot; /&gt; &lt;/div&gt; &lt;div&gt; &lt;label for=&quot;addressInput&quot;&gt; Adresse &lt;/label&gt; &lt;input id=&quot;addressInput&quot; type=&quot;text&quot; formControlName=&quot;address&quot; /&gt; &lt;/div&gt; &lt;button class=&quot;button&quot; type=&quot;submit&quot;&gt;J'achète !&lt;/button&gt; &lt;/form&gt;  Après avoir mis quelques articles dans le panier,les utilisateurs peuvent passer en revue leurs articles,saisir leur nom et leur adresse,et soumettre leur achat. Vue du panier avec le formulaire d'achat Pour confirmer la soumission,ouvrez la console pour voir un objet contenant le nom et l'adresse que vous avez soumis.  "},{"title":"C'est quoi la suite ?​","type":1,"pageTitle":"Partie 4 - Les formulaires pour la saisie des données par l'utilisateur","url":"/notebook-SNCF-P3/docs/front-end/angular/form-user-input#cest-quoi-la-suite-","content":"Vous disposez d'une application complète de boutique en ligne avec un catalogue de produits,un panier d'achat et une fonction de paiement. Félicitations ! 🎉 Vous avez pu suivre ce tutoriel en immitant et en découvrant les possibilités d'Angular. Evidemment vous ne maitrisez pas encore ce qu'il vient de se passer, mais vous avez une idée un peu plus clair de ce qu'il est possible de faire avec Angular.   "},{"title":"Partie 2 - Ajouter la navigation","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/front-end/angular/navigation","content":"","keywords":""},{"title":"Associer un chemin URL à un composant​","type":1,"pageTitle":"Partie 2 - Ajouter la navigation","url":"/notebook-SNCF-P3/docs/front-end/angular/navigation#associer-un-chemin-url-à-un-composant","content":"L'application utilise déjà le Router Angular pour accéder au ProductListComponent . Cette section vous montre comment définir une route pour afficher les détails d'un seul produit. Générez un nouveau composant pour les détails du produit. Dans le terminal, générez un nouveau composant product-details en exécutant la commande suivante : Terminal&quot; ng generate component product-details  Dans app.module.ts, ajoutez une route pour les détails du produit, avec un path de products/:productId et ProductDetailsComponent pour le component . src/app/app.module.ts&quot; @NgModule({ imports: [ BrowserModule, ReactiveFormsModule, RouterModule.forRoot([ { path: &quot;&quot;, component: ProductListComponent }, { path: &quot;products/:productId&quot;, component: ProductDetailsComponent }, ]), ], declarations: [ AppComponent, TopBarComponent, ProductListComponent, ProductAlertsComponent, ProductDetailsComponent, ], bootstrap: [AppComponent], }) export class AppModule {}  Ouvrez product-list.component.html. Modifiez l'ancre de nom de produit pour inclure un routerLink avec le product.id comme paramètre. src/app/product-list/product-list.component.html&quot; &lt;div *ngFor=&quot;let product of products&quot;&gt; &lt;h3&gt; &lt;a [title]=&quot;'Details du ' + product.name&quot; [routerLink]=&quot;['/products', product.id]&quot; &gt; {{ product.name }} &lt;/a&gt; &lt;/h3&gt; &lt;!-- . . . --&gt; &lt;/div&gt;  La directive RouterLink vous aide à personnaliser l'élément d'ancrage. Dans ce cas, la route, ou URL, contient un segment fixe, /products . Le segment final est variable, insérant la propriété id du produit actuel. Par exemple, l'URL d'un produit avec un id de 1 sera donc http://localhost:4200/products/1. Vérifiez que le routeur fonctionne comme prévu en cliquant sur le nom du produit. L'application doit afficher le ProductDetailsComponent , qui indique actuellement &quot;product-details works!&quot; Notez que l'URL dans la fenêtre d'aperçu change. Le segment final est products/# où # est le numéro de l'itinéraire sur lequel vous avez cliqué. Affichage de la page http://localhost:4200/products/1 "},{"title":"Voir les détails du produit​","type":1,"pageTitle":"Partie 2 - Ajouter la navigation","url":"/notebook-SNCF-P3/docs/front-end/angular/navigation#voir-les-détails-du-produit","content":"Le ProductDetailsComponent gère l'affichage de chaque produit. Le routeur Angular affiche les composants en fonction de l'URL du navigateur et de vos routes définis . Dans cette section, vous utiliserez le routeur Angular pour combiner les données des products et les informations de route afin d'afficher les détails spécifiques de chaque produit. Dans product-details.component.ts , importez ActivatedRoute depuis @angular/router et le tableau products depuis ../products. src/app/product-details/product-details.component.ts import { Component, OnInit } from &quot;@angular/core&quot;; import { ActivatedRoute } from &quot;@angular/router&quot;; import { Product, products } from &quot;../products&quot;;  Définissez la propriété du product. src/app/product-details/product-details.component.ts export class ProductDetailsComponent implements OnInit { product: Product | undefined; /_ ... _/ }  Injectez ActivatedRoute dans le constructor() en ajoutant private route: ActivatedRoute comme argument entre les parenthèses du constructeur. src/app/product-details/product-details.component.ts export class ProductDetailsComponent implements OnInit { product: Product | undefined; constructor(private route: ActivatedRoute) {} }  ActivatedRoute est spécifique à chaque composant chargé par le routeur Angular. ActivatedRoute contient des informations sur la route et les paramètres de la route. En injectant ActivatedRoute, vous configurez le composant pour utiliser un service. La prochaine étape (Gestion des données) couvre les services plus en détail. Dans la méthode ngOnInit(), extrayez le productId des paramètres de route et recherchez le produit correspondant dans le tableau products. src/app/product-details/product-details.component.ts ngOnInit() { // Récupère d'abord l'identifiant du produit de la route actuelle. const routeParams = this.route.snapshot.paramMap; const productIdFromRoute = Number(routeParams.get('productId')); // Trouver le produit qui correspond à l'identifiant fourni dans route. this.product = products.find(product =&gt; product.id === productIdFromRoute); }  Les paramètres de route correspondent aux variables de chemin que vous définissez dans la route. Pour accéder aux paramètres de la route, nous utilisons route.snapshot, qui est ActivatedRouteSnapshot qui contient des informations sur la route active à ce moment particulier. L'URL qui correspond à l'itinéraire fournit le productId. Angular utilise le productId pour afficher les détails de chaque produit unique. Mettez à jour le modèle ProductDetailsComponent pour afficher les détails du produit avec un *ngIf. Si un produit existe, le &lt;div&gt; s'affiche avec un nom, un prix et une description. src/app/product-details/product-details.component.html &lt;h2&gt;Détails du produit&lt;/h2&gt; &lt;div *ngIf=&quot;product&quot;&gt; &lt;h3&gt;{{ product.name }}&lt;/h3&gt; &lt;h4&gt;{{ product.price | currency }}&lt;/h4&gt; &lt;p&gt;{{ product.description }}&lt;/p&gt; &lt;/div&gt;  La ligne,&lt;h4&gt;{{ product.price | currency }}&lt;/h4&gt;, utilise une pipe (prononcez païpe 😉) de currency pour transformer product.price d'un nombre en une chaîne de devise. Une pipe est un moyen de transformer des données dans votre modèle HTML. Lorsque les utilisateurs cliquent sur un nom dans la liste desproduits, le routeur les ProductDetailsComponent vers l'URL distincte du produit, affiche le ProductDetailsComponent et affiche les détails du produit. Détails du produit de la page http://localhost:4200/products/1  "},{"title":"C'est quoi la suite ?​","type":1,"pageTitle":"Partie 2 - Ajouter la navigation","url":"/notebook-SNCF-P3/docs/front-end/angular/navigation#cest-quoi-la-suite-","content":"Vous avez configuré votre application de manière à pouvoir afficher les détails des produits, chacun ayant une URL distincte et ceci de manière complètement dynamique : ici nous avons 3 produits mais cela fonctionne si nous en avions 1 000 . Dans la prochaine section vous allez ajouter une fonctionnalité de panier d'achat, gérer les données du panier et récupérer des données externes pour les prix d'expédition. "},{"title":"Partie 3 - Gestion des données","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data","content":"","keywords":""},{"title":"Créer le service de panier d'achat​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#créer-le-service-de-panier-dachat","content":"Dans Angular, un service est une instance d'une classe que vous pouvez mettre à la disposition de n'importe quelle partie de votre application à l'aide du système d'injection de dépendances d'Angular. Actuellement,les utilisateurs peuvent consulter des informations sur les produits,et l'application peut simuler le partage et les notifications concernant les changements de produits. L'étape suivante consiste à créer un moyen pour les utilisateurs d'ajouter des produits à un panier. Cette section vous guide à travers l'ajout d'un bouton Acheter et la configuration d'un service de panier pour stocker des informations sur les produits dans le panier. "},{"title":"Définir un service de panier​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#définir-un-service-de-panier","content":"Cette section vous CartService dans la création du CartService qui suit les produits ajoutés au panier. Dans le terminal, générez un nouveau service de cart en exécutant la commande suivante : Terminal&quot; ng generate service cart  Importez l' interface Product de ./products.ts dans le fichier cart.service.ts et dans la classe CartService, définissez une propriété items pour stocker le tableau des produits actuels dans le panier. src/app/cart.service.ts&quot; import { Product } from &quot;./products&quot;; import { Injectable } from &quot;@angular/core&quot;; /* . . . */ @Injectable({ providedIn: &quot;root&quot;, }) export class CartService { items: Product[] = []; /* . . . */ }  Définissez des méthodes pour ajouter des articles au panier, renvoyer les articles du panier et effacer les articles du panier. src/app/cart.service.ts&quot; @Injectable({ providedIn: &quot;root&quot;, }) export class CartService { items: Product[] = []; /* . . . */ addToCart(product: Product) { this.items.push(product); } getItems() { return this.items; } clearCart() { this.items = []; return this.items; } /* . . . */ }  La méthode addToCart() ajoute un produit à un tableau d'itemsLa méthode getItems() collecte les articles que les utilisateurs ajoutent au panier et renvoie chaque article avec sa quantité associéeLa méthode clearCart() renvoie un tableau vide d'éléments, qui vide le panier "},{"title":"Utiliser le service de panier​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#utiliser-le-service-de-panier","content":"Cette section vous aide à utiliser CartService pour ajouter un produit au panier. Dans product-details.component.ts, importez le service de panier. src/app/product-details/product-details.component.ts import { Component, OnInit } from &quot;@angular/core&quot;; import { ActivatedRoute } from &quot;@angular/router&quot;; import { Product, products } from &quot;../products&quot;; import { CartService } from &quot;../cart.service&quot;;  Injectez le service cart en l'ajoutant au constructor(). src/app/product-details/product-details.component.ts export class ProductDetailsComponent implements OnInit { constructor( private route: ActivatedRoute, private cartService: CartService ) {} }  Définissez la méthode addToCart(), qui ajoute le produit actuel au panier. src/app/product-details/product-details.component.ts export class ProductDetailsComponent implements OnInit { /* . . . */ addToCart(product: Product) { this.cartService.addToCart(product); window.alert(&quot;Votre produit a été ajouté au panier!&quot;); } }  La méthode addToCart() effectue les opérations suivantes : Prend le product courant comme argumentUtilise la CartService addToCart() pour ajouter le produit au panierAffiche un message indiquant que vous avez ajouté un produit au panier. Dans product-details.component.html, ajoutez un bouton avec le texte Acheter et liez l'événement click() à la méthode addToCart(). Ce code met à jour le modèle de détails du produit avec un bouton Acheter qui ajoute le produit actuel au panier. src/app/product-details/product-details.component.html &lt;h2&gt;Détails du produit&lt;/h2&gt; &lt;div *ngIf=&quot;product&quot;&gt; &lt;h3&gt;{{ product.name }}&lt;/h3&gt; &lt;h4&gt;{{ product.price | currency }}&lt;/h4&gt; &lt;p&gt;{{ product.description }}&lt;/p&gt; &lt;button type=&quot;button&quot; (click)=&quot;addToCart(product)&quot;&gt;Acheter&lt;/button&gt; &lt;/div&gt;  Vérifiez que le nouveau bouton Acheter apparaît comme prévu en actualisant l'application et en cliquant sur le nom d'un produit pour afficher ses détails. Le bouton Acheter est ajouté à la page Détails Cliquez sur le bouton Acheter pour ajouter le produit à la liste des articles stockés dans le panier et afficher un message de confirmation. Notification d'ajout du produit au panier  "},{"title":"Créer la vue panier​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#créer-la-vue-panier","content":"Pour que les clients puissent voir leur panier,vous pouvez créer la vue du panier en deux étapes : Créez un composant de panier et configurez le routage vers le nouveau composant.Affichez les éléments du panier. "},{"title":"Configurer le composant panier​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#configurer-le-composant-panier","content":"Pour créer la vue du panier, suivez les mêmes étapes que pour créer le ProductDetailsComponent et configurer le routage pour le nouveau composant. Générez un nouveau composant nommé cart dans le terminal en exécutant la commande suivante : Terminal ng generate component cart  Cette commande générera le fichier cart.component.ts et ses fichiers de modèles et de styles associés. src/app/cart/cart.component.ts import { Component } from &quot;@angular/core&quot;; @Component({ selector: &quot;app-cart&quot;, templateUrl: &quot;./cart.component.html&quot;, styleUrls: [&quot;./cart.component.css&quot;], }) export class CartComponent {}  Notez que le CartComponent nouvellement créé est ajouté aux declarations du module dans app.module.ts. src/app/app.module.ts import { CartComponent } from './cart/cart.component'; @NgModule({ declarations: [ AppComponent, TopBarComponent, ProductListComponent, ProductAlertsComponent, ProductDetailsComponent, CartComponent, ], /* . . . */  Toujours dans app.module.ts, ajoutez une route pour le composant CartComponent, avec un path de cart. src/app/app.module.ts @NgModule({ imports: [ BrowserModule, ReactiveFormsModule, RouterModule.forRoot([ { path: '', component: ProductListComponent }, { path: 'products/:productId', component: ProductDetailsComponent }, { path: 'cart', component: CartComponent }, ]) ], /* . . . */  Mettez à jour le bouton Paiement afin qu'il soit acheminé vers l'URL /cart . Dans top-bar.component.html, ajoutez une directive routerLink pointant vers /cart. src/app/top-bar/top-bar.component.html &lt;a routerLink=&quot;/cart&quot; class=&quot;button fancy-button&quot;&gt; &lt;i class=&quot;material-icons&quot;&gt;shopping_cart&lt;/i&gt;Paiement &lt;/a&gt;  Vérifiez que le nouveau CartComponent fonctionne comme prévu en cliquant sur le bouton Paiement . Vous pouvez voir le texte par défaut &quot;cart works!&quot;, et l'URL a le modèle (http://localhost:4200/cart)[http://localhost:4200/cart]. Le composant panier fonctionne "},{"title":"Afficher les éléments du panier​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#afficher-les-éléments-du-panier","content":"Cette section vous montre comment utiliser le service de panier pour afficher les produits dans le panier. Dans cart.component.ts , importez le CartService à partir du fichier cart.service.ts. src/app/cart/cart.component.ts import { Component } from &quot;@angular/core&quot;; import { CartService } from &quot;../cart.service&quot;;  Injectez le CartService pour que le CartComponent puisse l'utiliser en l'ajoutant au constructor() . src/app/cart/cart.component.ts export class CartComponent { constructor(private cartService: CartService) {} }  Définissez la propriété items pour stocker les produits dans le panier. src/app/cart/cart.component.ts export class CartComponent { items = this.cartService.getItems(); constructor(private cartService: CartService) {} }  Ce code définit les éléments à l'aide de la CartService getItems() . Vous avez défini cette méthode lorsque vous avez créé cart.service.ts . Mettez à jour le modèle de panier avec une en-tête et utilisez une &lt;div&gt; avec un *ngFor pour afficher chacun des articles du panier avec son nom et son prix. Le modèle CartComponent résultant est le suivant. src/app/cart/cart.component.html &lt;h3&gt;Panier&lt;/h3&gt; &lt;div class=&quot;cart-item&quot; *ngFor=&quot;let item of items&quot;&gt; &lt;span&gt;{{ item.name }}&lt;/span&gt; &lt;span&gt;{{ item.price | currency }}&lt;/span&gt; &lt;/div&gt;  Vérifiez que votre panier fonctionne comme prévu : Cliquez sur Mon magasin.Cliquez sur le nom d'un produit pour afficher ses détails.Cliquez sur Acheter pour ajouter le produit au panier.Cliquez sur Paiement pour voir le panier. Panier avec plein de produits  "},{"title":"Récupérer les prix d'expédition​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#récupérer-les-prix-dexpédition","content":"Les serveurs renvoient souvent des données sous la forme d'un flux. Les flux sont utiles car ils facilitent la transformation des données renvoyées et la modification de la façon dont vous demandez ces données. Angular HttpClient est un moyen intégré de récupérer des données à partir d'API externes et de les fournir à votre application sous forme de flux un peu comme la fonction fetch(). Cette section vous montre comment utiliser HttpClient pour récupérer les prix d'expédition à partir d'un fichier externe. L'application que vous construsez pour ce tuto est livrée avec des données d'expédition prédéfinies dans le fichier assets/shipping.json. Utilisez ces données pour ajouter les prix d'expédition des articles dans le panier. src/assets/shipping.json [ { &quot;type&quot;: &quot;De nuit&quot;, &quot;price&quot;: 25.99 }, { &quot;type&quot;: &quot;Livraison 2 jours&quot;, &quot;price&quot;: 9.99 }, { &quot;type&quot;: &quot;Voie postale&quot;, &quot;price&quot;: 2.99 } ]  "},{"title":"Configurer AppModule pour utiliser HttpClient​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#configurer-appmodule-pour-utiliser-httpclient","content":"Pour utiliser le HttpClient d'Angular, vous devez configurer votre application pour utiliser HttpClientModule. Le HttpClientModule d'Angular enregistre les fournisseurs dont votre application a besoin pour utiliser le service HttpClient dans toute votre application. Dans app.module.ts, importez HttpClientModule à partir du package @angular/common/http en haut du fichier avec les autres importations. Comme il existe un certain nombre d'autres importations, cet extrait de code les omet par souci de concision. Assurez-vous de laisser les importations existantes en place. src/app/app.module.ts import { HttpClientModule } from &quot;@angular/common/http&quot;;  Pour enregistrer les fournisseurs HttpClient d'Angular globalement (pour tout les composants de l'application), ajoutez HttpClientModule au tableau d'imports. src/app/app.module.ts @NgModule({ imports: [ BrowserModule, HttpClientModule, // &lt;- ICI ReactiveFormsModule, RouterModule.forRoot([ { path: &quot;&quot;, component: ProductListComponent }, { path: &quot;products/:productId&quot;, component: ProductDetailsComponent }, { path: &quot;cart&quot;, component: CartComponent }, ]), ], declarations: [ AppComponent, TopBarComponent, ProductListComponent, ProductAlertsComponent, ProductDetailsComponent, CartComponent, ], bootstrap: [AppComponent], }) export class AppModule {}  "},{"title":"Configurer CartService pour utiliser HttpClient​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#configurer-cartservice-pour-utiliser-httpclient","content":"L'étape suivante consiste à injecter le service HttpClient dans votre service afin que votre application puisse récupérer des données et interagir avec des API et des ressources externes. Dans cart.service.ts, importez HttpClient à partir du package @angular/common/http. src/app/cart/cart.service.ts import { Injectable } from &quot;@angular/core&quot;; import { HttpClient } from &quot;@angular/common/http&quot;; import { Product } from &quot;./products&quot;;  Injectez HttpClient dans le constructor() de CartService . src/app/cart/cart.service.ts export class CartService { items: Product[] = []; constructor(private http: HttpClient) {} /* . . . */ }  "},{"title":"Configurez CartService pour obtenir les prix d'expédition​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#configurez-cartservice-pour-obtenir-les-prix-dexpédition","content":"Pour obtenir les données d'expédition, à partir de shipping.json, vous pouvez utiliser la méthode get() de HttpClient. Dans cart.service.ts, sous la méthode clearCart(), définissez une nouvelle méthode getShippingPrices() qui utilise la méthode get() de HttpClient. src/app/cart/cart.service.ts export class CartService { /* . . . */ getShippingPrices() { return this.http.get&lt;{ type: string; price: number }[]&gt;( &quot;/assets/shipping.json&quot; ); } }   "},{"title":"Créer un composant d'expédition​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#créer-un-composant-dexpédition","content":"Maintenant que vous avez configuré votre application pour récupérer les données d'expédition,vous pouvez créer un endroit pour afficher ces données. Générez un composant de panier nommé shipping dans le terminal en exécutant la commande suivante : Terminal ng generate component shipping  Cette commande générera le fichier shipping.component.ts et les fichiers de modèles et de styles associés. src/app/shipping/shipping.component.ts import { Component } from &quot;@angular/core&quot;; @Component({ selector: &quot;app-shipping&quot;, templateUrl: &quot;./shipping.component.html&quot;, styleUrls: [&quot;./shipping.component.css&quot;], }) export class ShippingComponent {}  Dans app.module.ts, ajoutez une route pour l'expédition. Spécifiez un path shipping et un composant de ShippingComponent. src/app/app.module.ts @NgModule({ imports: [ BrowserModule, HttpClientModule, ReactiveFormsModule, RouterModule.forRoot([ { path: &quot;&quot;, component: ProductListComponent }, { path: &quot;products/:productId&quot;, component: ProductDetailsComponent }, { path: &quot;cart&quot;, component: CartComponent }, { path: &quot;shipping&quot;, component: ShippingComponent }, ]), ], declarations: [ AppComponent, TopBarComponent, ProductListComponent, ProductAlertsComponent, ProductDetailsComponent, CartComponent, ShippingComponent, ], bootstrap: [AppComponent], }) export class AppModule {}  Il n'y a pas encore de lien vers le nouveau composant d'expédition, mais vous pouvez visionner ce composanten entrant l'URL spécifiée par sa route. L'URL d'affichage de ce composant est : http://localhost:4200/shipping. "},{"title":"Configuration du CartService ShippingComponent pour utiliser CartService​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#configuration-du-cartservice-shippingcomponent-pour-utiliser-cartservice","content":"Cette section vous guide dans la modification de ShippingComponent pour récupérer les données d'expédition via HTTP à partir du fichier shipping.json. Dans shipping.component.ts, importez CartService. src/app/shipping/shipping.component.ts import { Component, OnInit } from &quot;@angular/core&quot;; import { Observable } from &quot;rxjs&quot;; import { CartService } from &quot;../cart.service&quot;;  Injectez le service cart dans le constructor() ShippingComponent () . src/app/shipping/shipping.component.ts /* . . . */ constructor(private cartService: CartService) { } /* . . . */  Définissez une propriété shippingCosts dont la valeur sera initialisée à l'aide de la méthode getShippingPrices() de CartService. Initialisez la propriété shippingCosts dans la méthode ngOnInit(). src/app/shipping/shipping.component.ts export class ShippingComponent implements OnInit { shippingCosts!: Observable&lt;{ type: string; price: number }[]&gt;; constructor(private cartService: CartService) {} ngOnInit(): void { this.shippingCosts = this.cartService.getShippingPrices(); } }  Mettez à jour le modèle ShippingComponent pour afficher les types d'expédition et les prix à l'aide d'une pipe async. src/app/shipping/shipping.component.html &lt;h3&gt;Prix d'expédition&lt;/h3&gt; &lt;div class=&quot;shipping-item&quot; *ngFor=&quot;let shipping of shippingCosts | async&quot;&gt; &lt;span&gt;{{ shipping.type }}&lt;/span&gt; &lt;span&gt;{{ shipping.price | currency }}&lt;/span&gt; &lt;/div&gt;  La pipe async renvoie la dernière valeur d'un flux de données et continue de le faire pendant toute la durée de vie d'un composant donné. Lorsque Angular détruit ce composant, la canal async s'arrête automatiquement. Ajoutez un lien de la vue ShippingComponent dans la page CartComponent . src/app/cart/cart.component.hmtl &lt;h3&gt;Panier&lt;/h3&gt; &lt;p&gt; &lt;a routerLink=&quot;/shipping&quot;&gt;Prix d'expédition&lt;/a&gt; &lt;/p&gt; &lt;div class=&quot;cart-item&quot; *ngFor=&quot;let item of items&quot;&gt; &lt;span&gt;{{ item.name }}&lt;/span&gt; &lt;span&gt;{{ item.price | currency }}&lt;/span&gt; &lt;/div&gt;  Cliquez sur le bouton Paiement pour voir le panier mis à jour. N'oubliez pas que changer l'application provoque l'actualisation de l'aperçu, ce qui vide le panier. Ajout du lien de la page Prix d'Expédition Cliquez sur le lien pour accéder aux prix d'expédition. Liste des Prix d'expédition  "},{"title":"C'est quoi la suite ?​","type":1,"pageTitle":"Partie 3 - Gestion des données","url":"/notebook-SNCF-P3/docs/front-end/angular/manage-data#cest-quoi-la-suite-","content":"Vous disposez maintenant d'une application de magasin avec un catalogue de produits,un panier d'achat et vous pouvez consulter les prix d'expédition. Pour continuer à explorer Angular : Continuez vers Formulaires pour la saisie de l'utilisateur pour terminer l'application en ajoutant la vue du panier et un formulaire de paiement. "},{"title":"DOM","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/front-end/dom","content":"","keywords":""},{"title":"Affichage de l'heure​","type":1,"pageTitle":"DOM","url":"/notebook-SNCF-P3/docs/front-end/dom#affichage-de-lheure","content":"Dans une page HTML : Ajouter une paragraphe contenant le texte : &quot;00:00:00&quot; Au chargement de la page HTML, en JS : Générer l'heure au format HH:MM:SSHelp pour générer l'heure : new Date().toLocaleTimeString(&quot;fr&quot;)Modifier le texte du paragraphe avec cette heureFaire en sorte que l'heure se mette à jour automatiquement toute les secondesHelp pour la mise à jour automatique : il faut utiliser setInterval Contrainte : Afficher l'heure en rouge et gras si les secondes sont multiples de 3 à l’aide d’une classe CSS "},{"title":"Guess the number​","type":1,"pageTitle":"DOM","url":"/notebook-SNCF-P3/docs/front-end/dom#guess-the-number","content":"Générer un nombre aléatoire entre 0 et 100Demander à l'utilisateur de le trouverHelp :let prenom = prompt('Quel est ton prénom ? ')Indiquer à l'utilisateur si c'est plus ou moinsIndiquer si l'utilisateur à trouvé la bonne réponse Bonus : lorsque l'utilisateur a trouvé, lui indiquer le nombre d'essais effectués et le temps écoulé. "},{"title":"Partie 1 - Gérer les données avec des composants","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/front-end/angular/product-list","content":"","keywords":""},{"title":"Créer la liste des produits​","type":1,"pageTitle":"Partie 1 - Gérer les données avec des composants","url":"/notebook-SNCF-P3/docs/front-end/angular/product-list#créer-la-liste-des-produits","content":"Dans cette section, vous allez mettre à jour l'application pour afficher une liste de produits. Vous utiliserez des données de produits prédéfinies à partir du fichier products.ts et des méthodes du fichier product-list.component.ts. Cette section vous guide dans la modification du HTML, également appelé template. Dans le dossier product-list, ouvrez le fichier template product-list.component.html.Ajoutez ce qu'on appelle une directive structurelle *ngFor sur une &lt;div&gt;, comme suit. src/app/product-list/product-list.component.html &lt;h2&gt;Liste de produits&lt;/h2&gt; &lt;div *ngFor=&quot;let product of products&quot;&gt;&lt;/div&gt;  Avec *ngFor, la &lt;div&gt; se répète pour chaque produit de la liste. Les directives structurelles façonnent ou remodèlent la structure du DOM, en ajoutant, supprimant et manipulant des éléments. Pour plus d'informations sur les directives structurelles, voir Directives structurelles. À l'intérieur de la &lt;div&gt;, ajoutez un &lt;h3&gt; et {{ product.name }}. L'instruction {{ product.name }} est un exemple de syntaxe d'interpolation d'Angular. L'interpolation {{ }} vous permet d'afficher la valeur de la propriété en tant que texte. src/app/product-list/product-list.component.html &lt;h2&gt;Liste de produits&lt;/h2&gt; &lt;div *ngFor=&quot;let product of products&quot;&gt; &lt;h3&gt;{{ product.name }}&lt;/h3&gt; &lt;/div&gt;  L'aperçu se met à jour pour afficher le nom de chaque produit de la liste. Les produits sont ajoutés à la liste Pour faire de chaque nom de produit un lien vers les détails du produit, ajoutez l'élément &lt;a&gt; autour de {{ product.name }}. Définissez le titre sur le nom du produit en utilisant la syntaxe de liaison de propriété [ ], comme suit : src/app/product-list/product-list.component.html &lt;h2&gt;Liste de produits&lt;/h2&gt; &lt;div *ngFor=&quot;let product of products&quot;&gt; &lt;h3&gt; &lt;a [title]=&quot;'Détails du '+ product.name&quot;&gt; {{ product.name }} &lt;/a&gt; &lt;/h3&gt; &lt;/div&gt;  Sur la page de prévisualisation, passez la souris sur le nom du produit pour afficher le titre. Le titre est le nom du produit précédé de la chaine de caractères &quot;Détails du &quot;. La syntaxe de liaison de propriété [ ] vous permet d'attribuer une valeur dynamique à tout attribut (ici title) des éléments html, cool non ?! Le titre du produit s'affiche Ajoutez une description de produit à la liste. Sur une balise &lt;p&gt;, utilisez une directive *ngIf pour qu'Angular ne crée la balise &lt;p&gt; que si le produit actuel a une description. src/app/product-list/product-list.component.html &lt;h2&gt;Liste de produits&lt;/h2&gt; &lt;div *ngFor=&quot;let product of products&quot;&gt; &lt;h3&gt; &lt;a [title]=&quot;'Détails du '+ product.name&quot;&gt; {{ product.name }} &lt;/a&gt; &lt;/h3&gt; &lt;p *ngIf=&quot;product.description&quot;&gt;Description: {{ product.description }}&lt;/p&gt; &lt;/div&gt;  L'application affiche maintenant le nom et la description de chaque produit de la liste. Remarquez que le dernier produit n'a pas de paragraphe de description. Angular ne crée pas l'élément &lt;p&gt; car la propriété description du produit est vide. Les descriptions de produits sont ajoutées à la liste Ajoutez un bouton pour que les utilisateurs puissent partager un produit. Liez l'événement click du bouton à la méthode share() dans product-list.component.ts. La liaison d'événement utilise un ensemble de parenthèses, ( ), autour de l'événement, comme dans l'événement (click) sur l'élément &lt;button&gt;. src/app/product-list/product-list.component.html &lt;h2&gt;Liste de produits&lt;/h2&gt; &lt;div *ngFor=&quot;let product of products&quot;&gt; &lt;h3&gt; &lt;a [title]=&quot;'Détails du '+ product.name&quot;&gt; {{ product.name }} &lt;/a&gt; &lt;/h3&gt; &lt;p *ngIf=&quot;product.description&quot;&gt;Description: {{ product.description }}&lt;/p&gt; &lt;button type=&quot;button&quot; (click)=&quot;share()&quot;&gt;Partager&lt;/button&gt; &lt;/div&gt;  Chaque produit a maintenant un bouton Partager. Les boutons Partager sont ajoutés à la liste Cliquez sur un bouton Partager déclenche la méthode share() dans product-list.component.ts. Cela affiche une fenêtre contextuelle avec le message &quot;Le produit a été partagé !&quot;. L'édition des template vous a permis d'explorer certaines des fonctionnalités les plus populaires d'Angular. Pour plus d'informations, voir Introduction aux composants et aux modèles.  "},{"title":"Passer des données à un composant enfant​","type":1,"pageTitle":"Partie 1 - Gérer les données avec des composants","url":"/notebook-SNCF-P3/docs/front-end/angular/product-list#passer-des-données-à-un-composant-enfant","content":"Actuellement, la liste des produits affiche le nom et la description de chaque produit. Le composant ProductListComponent définit également une propriété products qui contient les données importées pour chaque produit du tableau products.ts. L'étape suivante consiste à créer une nouvelle fonctionnalité d'alerte qui utilise les données du produit de ProductListComponent. L'alerte vérifie le prix du produit et, si le prix est supérieur à 700 $, affiche un bouton Notify Me qui permet aux utilisateurs de s'inscrire pour recevoir des notifications lorsque le produit est en solde. Cette section vous guide dans la création d'un composant enfant, ProductAlertsComponent, qui peut recevoir des données de son composant parent, ProductListComponent. Ouvrez un second terminal pour pouvoir exécuter ta première commande de génération d'un nouveau composant !Dans le nouveau terminal, génèrez un nouveau composant nommé product-alerts en exécutant la commande suivante : Dans git bash ou un terminal ng generate component product-alerts  Cette commande génère quatre fichiers : Un fichier de spécification de test pour le composant. (dont on ne se servira pas dans ce tutoriel)Un fichier de style CSS vide. (product-alerts.component.css)Un fichier de modèle HTML. (product-alerts.component.html)Un fichier de classe TypeScript. (product-alerts.component.ts) Ouvez le fichier product-alerts.component.ts. Le décorateur @Component() indique que la classe suivante est un composant. @Component() fournit également des métadonnées sur le composant, notamment son sélecteur, son template et ses styles. src/app/product-alerts/product-alerts.component.ts import { Component } from &quot;@angular/core&quot;; @Component({ selector: &quot;app-product-alerts&quot;, templateUrl: &quot;./product-alerts.component.html&quot;, styleUrls: [&quot;./product-alerts.component.css&quot;], }) export class ProductAlertsComponent {}  Les fonctionnalités clés du @Component() sont les suivantes : Le sélecteur, app-product-alerts, identifie le composant. Par convention, les sélecteurs de composants Angular commencent par le préfixe app-, suivi du nom du composant.Les noms de fichiers de template et de style font référence au HTML et au CSS du composant.La définition @Component() exporte également la classe, ProductAlertsComponent, qui gère les fonctionnalités du composant. Pour configurer ProductAlertsComponent afin de recevoir des données de produit, importez d'abord Input de @angular/core. src/app/product-alerts/product-alerts.component.ts import { Component, Input } from &quot;@angular/core&quot;; import { Product } from &quot;../products&quot;;  Dans la classe ProductAlertsComponent, définissez une propriété @Input() nommée product. Le décorateur @Input() indique que la valeur de la propriété product proviendra du composant parent, ici ProductListComponent. src/app/product-alerts/product-alerts.component.ts export class ProductAlertsComponent { @Input() product: Product | undefined; }  Ouvrez le fichier product-alerts.component.html, et remplacez le contenu par un bouton Alerte moi, qui n'apparaitra que si le prix du produit est supérieur à 700 $. src/app/product-alerts/product-alerts.component.html &lt;p *ngIf=&quot;product &amp;&amp; product.price &gt; 700&quot;&gt; &lt;button type=&quot;button&quot;&gt;Alerte moi&lt;/button&gt; &lt;/p&gt;  Le générateur de code a automatiquement ajouté ProductAlertsComponent à la liste des déclarations dans AppModule. Vous n'avez pas besoin de modifier AppModule pour utiliser le nouveau composant. src/app/app.module.ts import { ProductAlertsComponent } from &quot;./product-alerts/product-alerts.component&quot;; @NgModule({ imports: [ BrowserModule, ReactiveFormsModule, RouterModule.forRoot([{ path: &quot;&quot;, component: ProductListComponent }]), ], declarations: [ AppComponent, TopBarComponent, ProductListComponent, ProductAlertsComponent, // &lt;-- Ajouté automatiquement ], bootstrap: [AppComponent], }) export class AppModule {}  Enfin, pour afficher le bouton Alerte moi dans ProductListComponent, ajoutez le sélecteur app-product-alerts à la fin de la liste des éléments de produit. src/app/product-list/product-list.component.html //... &lt;button (click)=&quot;share()&quot;&gt;Share&lt;/button&gt; &lt;app-product-alerts [product]=&quot;product&quot;&gt;&lt;/app-product-alerts&gt; //...  Le nouveau composant ProductAlertsComponent prend en paramètre d'entrée le produit actuel. Le composant ProductListComponent fournit le produit actuel à la balise ProductAlertsComponent en utilisant la syntaxe de liaison de propriété [product]. Grace à cette syntaxe, le composant ProductAlertsComponent peut accéder au produit actuel et afficher un bouton Alerte moi si le prix du produit est supérieur à 700 $. Les boutons Notifier sont ajoutés à la liste  "},{"title":"Partager des informations du composant enfant vers le composant parent​","type":1,"pageTitle":"Partie 1 - Gérer les données avec des composants","url":"/notebook-SNCF-P3/docs/front-end/angular/product-list#partager-des-informations-du-composant-enfant-vers-le-composant-parent","content":"Pour rendre fonctionnel notre bouton Alerte moi, nous allons devoir faire remonter l'information du composant enfant vers le composant parent. Le composant ProductAlertsComponent va donc devoir émettre un événement lorsque l'utilisateur clique sur le bouton Alerte moi afin que le composant ProductListComponent puisse réagir à cet événement. Dans product-alerts.component.ts, importez Output et EventEmitter de @angular/core. src/app/product-alerts/product-alerts.component.ts import { Component, Input, Output, EventEmitter } from &quot;@angular/core&quot;; import { Product } from &quot;../products&quot;;  Déclarez une propriété nommée notify avec le décorateur @Output() qui stockera une instance d'EventEmitter(). Configurer ProductAlertsComponent avec un @Output(), lui permet d'émettre un événement lorsque la valeur de la propriété notify change. src/app/product-alerts/product-alerts.component.ts export class ProductAlertsComponent { @Input() product: Product | undefined; @Output() notify = new EventEmitter(); }  Dans product-alerts.component.html, ajoutez un écouteur d'événement (click) au bouton Alerte moi qui appelle la méthode notify.emit(). src/app/product-alerts/product-alerts.component.html &lt;p *ngIf=&quot;product &amp;&amp; product.price &gt; 700&quot;&gt; &lt;button type=&quot;button&quot; (click)=&quot;notify.emit()&quot;&gt;Alerte moi&lt;/button&gt; &lt;/p&gt;  Paramètrez le comportement qui se produit lorsque l'utilisateur clique sur le bouton Alerte moi. Le parent, ProductListComponent, et non ProductAlertsComponent, réagit lorsque l'enfant émet l'événement. Dans product-list.component.ts, définis une méthode onNotify(), similaire à la méthode share(). src/app/product-list/product-list.component.ts export class ProductListComponent { products = [...products]; share() { window.alert(&quot;Le produit a été partagé !&quot;); } onNotify() { window.alert(&quot;Vous serez notifié lorsque le produit sera en promotion !&quot;); } }  Mettez à jour ProductListComponent pour recevoir les données de ProductAlertsComponent. Dans product-list.component.html, ajoutez un écouteur d'événement (notify) à la balise app-product-alerts. src/app/product-list/product-list.component.html //... &lt;button (click)=&quot;share()&quot;&gt;Share&lt;/button&gt; &lt;app-product-alerts [product]=&quot;product&quot; (notify)=&quot;onNotify()&quot; &gt;&lt;/app-product-alerts&gt; //...  Cliquez sur le bouton Alerte moi pour vérifier que la fenêtre d'alerte s'affiche. Notification produit en solde  "},{"title":"C'est quoi la suite ?​","type":1,"pageTitle":"Partie 1 - Gérer les données avec des composants","url":"/notebook-SNCF-P3/docs/front-end/angular/product-list#cest-quoi-la-suite-","content":"Dans cette section, vous avez créé une application qui itère et affiche des données. Vous avez également appris à créer des composants imbriqués et à mettre en place leur communication parent vers enfant (@Input) et enfant vers parent (@Output). Dans la prochaine section, vous allez apprendre à créer une page de détails de produit. "},{"title":"Introduction CSS","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/front-end/introduction-css","content":"","keywords":""},{"title":"Ajouter du style à nos pages​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#ajouter-du-style-à-nos-pages","content":""},{"title":"Comment ?​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#comment-","content":"Possible d’ajouter directement dans une balise à l’aide de l’attribut style MAIS manque de maintenabilité &lt;span style=&quot;color:red;&quot;&gt;Mon texte rouge&lt;/span&gt;  Dans la balise &lt;head&gt; &lt;head&gt; &lt;!-- ... --&gt; &lt;style type=&quot;text/css&quot;&gt; span { color: red; } &lt;/style&gt; &lt;!-- ... --&gt; &lt;head&gt;&lt;/head&gt; &lt;/head&gt;   "},{"title":"Bonnes pratiques​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#bonnes-pratiques","content":"Liaison directement dans le document html dans le &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot; /&gt; &lt;!-- Ou --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;   "},{"title":"Les bases de la syntaxe​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#les-bases-de-la-syntaxe","content":""},{"title":"En bref​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#en-bref","content":"Sélecteur : cible l'élément sur lequel on applique les propriété (balise, class, id)Propriété : définie l’effet que l’on veut utiliser (couleur, taille, position, etc), elle sont à l'intérieur d'accoladesValeur de la propriété (red, 5px, #fff, etc)Les commentaires sont aussi possibles sélecteur { propriété: valeur; propriété: valeur; /* Commentaire */ } /* Commentaire */  → Le tout constitue une déclaration CSS  "},{"title":"Type de sélecteur, hiérarchie, parent/enfant​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#type-de-sélecteur-hiérarchie-parentenfant","content":""},{"title":"Type de sélecteur​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#type-de-sélecteur","content":"On peut sélectionner n’importe quel élément HTML pour lui appliquer un style Ici tous les textes contenus dans des balises &lt;span&gt; seront de couleur rose span { color: pink; }  Il faut bien garder en tête que l'ordre de déclaration de tes éléments à une importance : si deux sélecteurs portent sur le même élément la dernière déclaration sera la seule effective Souviens toi qu'il est possible de mettre la même classe sur plusieurs éléments html. Grâce à cela tu peux donc appliquer le même style à plusieurs éléments. h1 { color: pink; } h1 { color: blue; }  ⚠️ En css pour désigner une classe il faut que tu précèdes son nom d'un point. &lt;div class=&quot;ma-classe&quot;&gt; ce texte sera de couleur rose &lt;div&gt; &lt;p class=&quot;ma-classe&quot;&gt;et ce texte aussi&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  .ma-classe { color: pink; }  L'inverse est aussi possible : plusieurs classes css peuvent être appliquées sur un même élément html &lt;div class=&quot;classe-bleu taille-txt&quot;&gt; ce texte sera de couleur bleu et de taille 10px &lt;div&gt; &lt;p class=&quot;classe-bleu&quot;&gt;ce texte sera juste en bleu&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  .classe-bleu { color: blue; } .taille-txt { font-size: 10px; }  Pour sélectionner avec précision un élément possédant une classe on colle le nom de la balise avec le nom de la classe &lt;div class=&quot;classe-bleu&quot;&gt; ce texte sera de couleur bleu &lt;div&gt; &lt;p class=&quot;classe-bleu&quot;&gt;Mais pas ce texte&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  div.classe-bleu { color: blue; }  → Test juste ici : https://codepen.io/Jeremy_Bojko/pen/abGvqaq Parlons maintenant des identifiants. En fait il n'y a pas grand chose à dire : même rôle que les classes mais il doit être unique dans la page ⚠️ En css pour désigner un identifiant il faut que tu précèdes son nom d'un dièse &lt;div id=&quot;mon-id&quot;&gt;ce texte sera de couleur rose&lt;/div&gt;  #mon-id { color: pink; }  Pour les plus fous les mélanges sont possible ! &lt;div id=&quot;mon-id&quot; class=&quot;ma-classe&quot;&gt; ce texte sera de couleur rose &lt;div class=&quot;ma-classe&quot;&gt;mais pas celui la&lt;/div&gt; &lt;/div&gt;  div#mon-id.ma-classe { color: pink; }  "},{"title":"Pseudo classes​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#pseudo-classes","content":"Une pseudo classe permet d'ajouter à un sélecteur un état spécifique dans lequel il doit être pour être ciblé et que le style s'applique à lui. &lt;div class=&quot;ma-classe&quot;&gt;ce texte sera de couleur rose au survol&lt;/div&gt;  .ma-classe:hover { color: pink; }  ⚠️ En css pour désigner une pseudo classe il faut que tu précèdes son nom de 2 points (:) 👉 Liste de toute les pseudo classes disponible : Mozilla Docs 🕹️ Pour expérimenter c'est ici : Lien vers Codepen "},{"title":"Hiérarchie et généalogie​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#hiérarchie-et-généalogie","content":"Voici un extrait de code et sa représentation schématique se faire cette représentation peut aider lorsque tu voudras agir avec précision sur certains éléments html à travers ton css &lt;div&gt; &lt;h1&gt;J'aime la papaye&lt;/h1&gt; &lt;p&gt; Pourquoi j'aime ce &lt;span&gt;fruit&lt;/span&gt;? Pour sa &lt;strong&gt;texture&lt;/strong&gt;! &lt;/p&gt; &lt;h2&gt;Les fraisiers&lt;/h2&gt; &lt;p&gt;Tout mes apprenants me font des fraisiers, et vous ?&lt;/p&gt; &lt;/div&gt;    Par exemple pour un sélecteur de descendance tu aurais ce code. Ici on agit sur tout les &lt;span&gt; enfants de &lt;p&gt; (dans l'exemple il n'y en a qu'un seul) p span { color: pink; }  ⚠️ Note bien l'espace entre le p et le span Par exemple pour une sélecteur de groupe tu aurais ce code. Ici on agit sur tout les &lt;h1&gt; et tout les&lt;h2&gt; h1, h2 { color: pink; }  Avec ces schéma il est aussi très important de bien comprendre la notion de portée de variable : Le style d'un élément html impact tout ses enfants mais peut être &quot;écrasé&quot; si la même propriété est redéfinis pour ses enfants. 🕹️ Pour expérimenter c'est ici : Lien vers Codepen 🕹️ Pour vérifier si tu as bien tout compris c'est ici : Lien vers CSS Diner  "},{"title":"Couleurs, unités​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#couleurs-unités","content":""},{"title":"Les couleurs en CSS​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#les-couleurs-en-css","content":"Notation Hexadécimal : #ffffff (blanc)Notation Hexadécimal courte : #fff (blanc)Notation RGB : rgb(255, 255, 255) / rgba(255, 255, 255, 1)Notations HSL : hsl(0, 0%, 100%) / hsla(0, 0%, 100%, 1)Mots clés : white 👉 https://htmlcolorcodes.com/fr/ 🕹️ Pour expérimenter c'est ici : Lien vers Codepen → Rendu final attendu du Codepen  Unités Le pixel : 1px (fixe, dépendante de la résolution de périphérique)Le cadratin : 1em (relative à la taille de police de l’élément parent)Si la police de base est en taille 10px alors 2em = 20pxLe pourcentage : 10% (relative à la taille de leur parent)  "},{"title":"Typographie et polices​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#typographie-et-polices","content":"body { font-family: Arial, Helvetica; }  body { font-size: 18px; }  body { line-height: 1.5; }  body { font-weight: bold; }  body { color: #ffffff; }  body { font-style: italic; }  p.align-center { text-align: center; }   "},{"title":"Bordures et background​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#bordures-et-background","content":""},{"title":"Les bordures​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#les-bordures","content":"Pour appliquer une bordure à un élément on utilise la propriété border. Elle a 3 sous propriétés : width, style et color → border : width style color; p { border: 1px solid #111111; }  On peut décomposer en 4 bordures : border-top, border-left, border-right, border-bottom p { border-top: 1px solid #111111; }  Il existe différents style de bordures : none : pas de borduredotted : pointillésdashed : tiretssolid : un trait simple p { border-top: 1px dashed #111111; }  Pour mettre en place des bordures arrondies on utilise la propriété border-radius : valeur p { border-radius: 10px; }  Et tu peux avoir mettre en place des paramètre plus en détail. Tu travailles alors coin par coin l'ordre est important : haut gauche, haut droite, bas droite, bas gauche p { border-radius: 10px 2px 5px 1px; }   "},{"title":"Dimensionnement​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#dimensionnement","content":"🕹️ Lien vers Codepen  "},{"title":"Positionnement​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#positionnement","content":"Sous forme d'exercice : lire cet article 🕹️ Pour vérifier si tout est compris direction ces exercices : Lien vers Codepen  "},{"title":"Fiche récap CSS​","type":1,"pageTitle":"Introduction CSS","url":"/notebook-SNCF-P3/docs/front-end/introduction-css#fiche-récap-css","content":"👉 https://htmlcheatsheet.com/css "},{"title":"Introduction HTML","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/front-end/introduction-html","content":"","keywords":""},{"title":"Les bases d'un site​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#les-bases-dun-site","content":""},{"title":"Qu'est-ce qu'une page web ?​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#quest-ce-quune-page-web-","content":"→ Un fichier texte (par exemple en .html) éditable comportant des éléments avec du sens. On parle de sens sémantique → Une page web peut contenir du texte, des liens vers d'autres pages, ou plus largement, des liens vers d'autres types de fichier (images, vidéo, etc) "},{"title":"Qu'est-ce qu'un site web ?​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#quest-ce-quun-site-web-","content":"→ Plusieurs pages web liées formant un ensemble cohérent dans la plupart du temps (on essaye en tout cas !) → Le réseau internet permet d'y avoir accès partout dans le monde, pour les sites web publiés et rendu disponible au public. La suite tu la connais, il te suffit d'y accéder via ton navigateur en tapant l'URL de ton site préféré (par exemple : https://estcequecestbientotleweekend.fr/) et bam le site web s'affiche dans ton navigateur ! "},{"title":"Pour aller plus loin ?​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#pour-aller-plus-loin-","content":"→ Tim Berners-Lee ? Qui est ce Monsieur important pour le Web 🙏 (Wikipedia) → W3C : World Wide Web Consortium (Website) → Validateur syntaxique W3C (Website)  "},{"title":"Syntaxe HTML : balises, éléments, attributs​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#syntaxe-html--balises-éléments-attributs","content":""},{"title":"Qu'est-ce qu’une balise ?​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#quest-ce-quune-balise-","content":"Elles permettent de structurer le contenu de ta pageChaque balise possède un rôle précis et a donc un poids sémantique : Dans une page, une balise h1 comportera une information importante, par exemple un titre, tandis qu'un p ne servira qu'à afficher du texte.Par convention, toute balise ouverte doit être fermée (même s'il y a quelques exceptions)Une balise est composée d'un nom et d'attributs Un exemple de balise span au sein d'une page HTML &lt;h1&gt;Hello World !&lt;/h1&gt;  → Les spécifications HTML définissent les noms des balises : &lt;html&gt;, &lt;body&gt;, &lt;span&gt;, &lt;img&gt;, &lt;div&gt;, &lt;a&gt;, &lt;p&gt;, &lt;header&gt;... Pour avoir la liste exhaustive de tous les éléments, direction la documentation ! 👉 Mozilla Developper Network Docs "},{"title":"Imbrication de balises​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#imbrication-de-balises","content":"Après avoir parlé de la plus petite brique d'un site, qu'est-ce qu'on en fait ? L'idée est dans le titre, il est possible d'imbriquer des balises pour obtenir une organisation hiérarchique : See the Pen &lt;a href=&quot;https://codepen.io/Jeremy_Bojko/pen/eYRdGeg&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Imbrication balise&lt;/a&gt; by Jérémy Bojko (&lt;a href=&quot;https://codepen.io/Jeremy_Bojko&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;@Jeremy_Bojko&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CodePen&lt;/a&gt;. Attention à imbriquer correctement tes éléments, l'ordre a du sens et le code ci-dessus n'est pas le même que celui-ci dessous : See the Pen &lt;a href=&quot;https://codepen.io/Jeremy_Bojko/pen/mdwrBXv&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Imbrication HTML 2&lt;/a&gt; by Jérémy Bojko (&lt;a href=&quot;https://codepen.io/Jeremy_Bojko&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;@Jeremy_Bojko&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CodePen&lt;/a&gt;. Même si visuellement on obtient pour l'instant le même résultat, la structure de nos 2 pages sont bien différentes. 🕹️ Pour expérimenter c'est ici : See the Pen &lt;a href=&quot;https://codepen.io/Jeremy_Bojko/pen/zYovqgR&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Imbrication balise&lt;/a&gt; by Jérémy Bojko (&lt;a href=&quot;https://codepen.io/Jeremy_Bojko&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;@Jeremy_Bojko&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;CodePen&lt;/a&gt;. "},{"title":"Attributs et valeurs​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#attributs-et-valeurs","content":"→ Il est possible d’ajouter des attributs aux balises pour modifier son comportement ou donner plus de précision sur certains paramètres (source d’une image, classe, liens, etc) → Plusieurs attributs peuvent être mis sur une balise &lt;span class=&quot;nom-classe&quot;&gt; Hello World ! &lt;/span&gt;  Ici, on a donc un élément HTML composé : d’une balise : spand’un attribut : classd’une valeur pour cet attribut : nom-classeet du contenu de notre élément : Hello World ! → Il est possible de visualiser les différents attributs existants sur la doc : 👉 Mozilla Docs 💻 Essayer de rechercher dans la console de votre navigateur Sur Firefox : clic droit sur un élément d'une page - inspecter - onglet Inspecteur - clic droit sur un élément - Afficher les propriétés DOMSur Chrome : clic droit sur un élément d'une page) inspecter - onglet Properties ⚠️ Les attributs sont toujours positionnés dans la balise ouvrante ! "},{"title":"Quelques exemples​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#quelques-exemples","content":"&lt;img src=&quot;logo.png&quot; width=&quot;200&quot; height=&quot;200&quot; alt=&quot;logo Simplon&quot; /&gt;  Ici les attributs de notre balise img sont : src : servant à définir le fichier image que tu vas afficher sur ta pagewidth : servant à définir la largeur de ton imageheight : servant à définir la hauteur de ton imagealt : servant à afficher un texte alternatif descriptif si l'image n'a pas pu être chargée, les informations de cet attribut servent aussi au malvoyant &lt;a href=&quot;https://monsite.com&quot;&gt;Mon lien vers ma ressources&lt;/a&gt;  Ici l'attribut de notre balise a est : href : servant à définir la ressource vers laquelle l'utilisateur sera redirigé lors du clic sur lien &lt;span id=&quot;mon-id&quot;&gt; Du texte en ligne &lt;/span&gt;  Ici l'attribut de notre balise span est : id : servant à définir un identifiant pour notre balise ⚠️ Cet identifiant est unique → 2 balises ne doivent pas avoir le même id &lt;p class=&quot;ma-class&quot;&gt;Mon petit paragraphe&lt;/p&gt;  Ici l'attribut de notre balise p est : class : servant à définir une classe pour notre balise ⚠️ Cette classe peut apparaitre sur plusieurs balises et une balise peut avoir plusieurs classes  "},{"title":"Autopsie d'une page HTML valide​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#autopsie-dune-page-html-valide","content":"DOCTYPE obligatoire (valider la page, version HTML, sinon peut faire bugger le navigateur)&lt;html&gt; la base de toute page : contient en général l'entête &lt;head&gt; et le corps &lt;body&gt;Attribut lang : indexation, synthèse vocale, vérification orthographique&lt;head&gt; entête du document contient : les méta-informations liens feuille css/jsUTF-8 définit l’encodage de caractère de la page (directement sous &lt;head&gt;)&lt;title&gt; contient le titre affiché dans l’onglet du navigateur (important pour le référencement)&lt;body&gt; contenu de votre page &lt;!DOCTYPE html&gt; &lt;html lang=&quot;fr&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt;  "},{"title":"Balises méta​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#balises-méta","content":"Les balises méta servent à donner des paramètres (un comportement ou des informations non visibles par l'utilisateur) à votre page, plusieurs fonctions sont possibles : → Redirection automatique &lt;meta http-equiv=&quot;refresh&quot; content=&quot;5;url=https://example.com&quot; /&gt;  → Spécificité mobile (indispensable pour ne pas avoir de surprise avec le responsive) &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;  → Information de la page &lt;meta name=&quot;application-name&quot; content=&quot;OpenStreetMap&quot; /&gt;  → Référencement &lt;meta name=&quot;description&quot; content=&quot;sert au référencement&quot; /&gt;  💻 Essayer de rechercher dans la console de votre navigateur La balise meta contenant la description du site marmiton "},{"title":"Commentaires​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#commentaires","content":"Pour pouvoir insérer des commentaires dans sa page HTML vous pouvez utiliser cette notation : &lt;!DOCTYPE html&gt; &lt;html lang=&quot;fr&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- commentaire--&gt; &lt;/body&gt; &lt;/html&gt;  Ce commentaire n'apparaitra donc pas dans votre page, mais il sera visible par vos visiteurs s'ils vont fouiller dans la console du navigateur !  "},{"title":"Structurer son contenu et lui donner du sens​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#structurer-son-contenu-et-lui-donner-du-sens","content":""},{"title":"Balise div​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#balise-div","content":"Permet de former des blocs dans votre pageC’est un conteneur qui peut inclure d’autres balisesAucune valeur sémantique (pas de “sens” à proprement parlé)Peut être utilisé pour regrouper des blocs et leur donner le même style css "},{"title":"Balise section​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#balise-section","content":"Comme une div, mais avec du sens, vos sections symbolisent les différentes parties de votre page "},{"title":"Balise paragraphe​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#balise-paragraphe","content":"Élément de type bloc, sera suivi d’un retour à la ligne ⚠️ Attention : il ne faut pas imbriquer les éléments de type &lt;p&gt; &lt;p&gt; Du texte &lt;p&gt; Encore du texte &lt;/p&gt; &lt;/p&gt;  &lt;p&gt;Du texte&lt;/p&gt; &lt;p&gt;Encore du texte&lt;/p&gt;  "},{"title":"Balise titre​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#balise-titre","content":"→ Vous pouvez utiliser les balises de &lt;h1&gt; à &lt;h6&gt; Au delà passage à la ligneHiérarchisation visuelle automatique &lt;h1&gt;Titre niveau 1&lt;/h1&gt; &lt;h2&gt;Titre niveau 1&lt;/h2&gt; &lt;h3&gt;Titre niveau 1&lt;/h3&gt; &lt;h4&gt;Titre niveau 1&lt;/h4&gt; &lt;h5&gt;Titre niveau 1&lt;/h5&gt; &lt;h6&gt;Titre niveau 1&lt;/h6&gt;  Pas de &lt;hx&gt; dans un &lt;p&gt; et inversement "},{"title":"Balise blockquote​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#balise-blockquote","content":"Permet de faire mettre en place des citationsRetour à la ligne ensuite &lt;blockquote&gt;Tout seul on va plus vite, ensemble, on va plus loin&lt;/blockquote&gt;  Tout seul on va plus vite, ensemble, on va plus loin 🕹️ Pour expérimenter c'est ici : Lien vers exercice CodePen  "},{"title":"Élément de mise en forme​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#élément-de-mise-en-forme","content":"Ces élément sont inlineIl se placent autour du contenu/textePas de retour à la ligneAjout du sens à certaines partie "},{"title":"Exemple​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#exemple","content":"&lt;strong&gt; : élément sémantique, le texte sera mis en gras (fortement mis en valeur)&lt;em&gt; : élément sémantique, le texte sera mis en italique (mis en évidence)&lt;span&gt; : permet de d’appliquer un style sur une portion de texte&lt;sup&gt; : affiche un exposant&lt;sub&gt; : affiche un indice&lt;small&gt; : petit caractère comme les copyright 🕹️ Pour expérimenter c'est ici : Lien vers exercice CodePen  "},{"title":"Lien hypertext ?​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#lien-hypertext-","content":""},{"title":"Utilité​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#utilité","content":"Élément cliquable, permet de renvoyer l’utilisateur sur une nouvelle page ou permet un téléchargementMise en avant à l’aide d’un style particulier (souligné et bleu) Renvoie vers : → Page externe → Page interne → Des fichiers "},{"title":"Comment ? (page externe)​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#comment--page-externe","content":"&lt;a href=&quot;http://www.google.fr&quot; title=&quot;aller sur ggl&quot;&gt;Lien vers GGL&lt;/a&gt;  Dans cet exemple tu as : Un lien vers la page google.frUne infobulle au survol de l'élément 🕹️ Pour expérimenter c'est ici : Lien vers exercice CodePen "},{"title":"Lien interne et arborescence de ton site​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#lien-interne-et-arborescence-de-ton-site","content":"→ L’ensemble des pages d’un site sont enregistrées dans un dossier appelé racine du site. Par convention le fichier “racine” est appelé index.html S’il existe il est affiché en priorité sinon tu peux tomber sur cette visualisation :  Voici un exemple d'arborescence &quot;classique&quot; d'un site web : |Dossier Site (racine) | |-css | |- style.css | |- js | |-index.js | |index.html  🕹Télécharger le dossier ci-dessous et compléter les liens entre chaque pages Exercice-liens-hypertext.zip |Dossier Site (racine) |index.html |-pages | |- page1.html | |-sous-pages | |- page2.html | |- page3.html  "},{"title":"Lien interne et chemin relatif​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#lien-interne-et-chemin-relatif","content":"On parle de chemin relatif lorsque l'on veut faire une référence d'un fichier vers un autre. Il faut donc définir le chemin qui relie l'un à l'autre. Si 2 fichiers sont dans le même répertoire on appelle le nom du fichierSi on veut faire un lien vers un fichier dans un dossier/répertoire, on ajoute le nom du répertoire devant le nom de fichierSi on se trouve dans un dossier/répertoire on ajoute ../ devant le nom de fichier "},{"title":"D'autres utilisation des balises ancre​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#dautres-utilisation-des-balises-ancre","content":"&lt;a href=&quot;mailto:email@mail.com&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;tel:0102030405&quot;&gt;&lt;/a&gt;  "},{"title":"Liste ordonnée / non ordonnées​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#liste-ordonnée--non-ordonnées","content":"&lt;ul&gt; &lt;li&gt;Élément 1&lt;/li&gt; &lt;li&gt;Élément 2&lt;/li&gt; &lt;/ul&gt;  Élément 1Élément 2 &lt;ol&gt; &lt;li&gt;Élément 1&lt;/li&gt; &lt;li&gt;Élément 2&lt;/li&gt; &lt;/ol&gt;  Élément 1Élément 2 Intérêts : → Slider d'image type carrousel → Liste de choix ou options à sélectionner → Onglet sur un site web 🕹️ Pour expérimenter c'est ici : Lien vers exercice CodePen "},{"title":"Les images​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#les-images","content":""},{"title":"Formats​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#formats","content":"JPEG (.jpg, .jpeg) : format compressé, réduction du poids de l’imageGIF (.gif) : 256 couleurs, compression sans perte, couleur de transparence, animation, utilisé pour les logosPNG (.png) : PNG8 256 couleurs, PNG24 16 millions couleur + transparence, utilisé pour les icône, logo, fond transparentSVG : icon permettant un redimensionnement sans dégradation "},{"title":"Recap​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#recap","content":"Photo → JPEG Illustration avec peu de couleur → PNG8 Illustration beaucoup de couleur et/ou transparence → PNG16 Image animée → GIF Icon redimensionnable → SVG "},{"title":"Insertion d'images​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#insertion-dimages","content":"On utilise la balise auto fermante &lt;img&gt;Alt affiche une description alternative si l’image ne se charge pas l’attribut est obligatoire mais vide si l’image est décorativelu vocalement par les lecteurs d’écranaide les personnes malvoyante  "},{"title":"Fiche récap HTML​","type":1,"pageTitle":"Introduction HTML","url":"/notebook-SNCF-P3/docs/front-end/introduction-html#fiche-récap-html","content":"👉 https://htmlcheatsheet.com "},{"title":"TypeScript","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/front-end/typescript","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#introduction","content":"TypeScript est un langage de programmation libre et open source développé par Microsoft qui a pour but d'améliorer et de sécuriser la production de code JavaScript. TypeScript est un sur-ensemble de JavaScript qui ajoute des fonctionnalités supplémentaires à ce dernier. Il est possible d'utiliser du code JavaScript dans un fichier TypeScript, mais pas l'inverse. "},{"title":"Installation​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#installation","content":"Pour installer TypeScript, il faut utiliser le gestionnaire de paquets npm : npm install -g typescript  "},{"title":"Compilation​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#compilation","content":"Pour compiler un fichier TypeScript, il faut utiliser la commande suivante : tsc nom-du-fichier.ts  "},{"title":"Compilation automatique​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#compilation-automatique","content":"Pour compiler automatiquement un fichier TypeScript à chaque modification, il faut utiliser la commande suivante : tsc nom-du-fichier.ts --watch  "},{"title":"Syntaxe​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#syntaxe","content":""},{"title":"Variables​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#variables","content":"let nomVariable: type = valeur;  "},{"title":"Types​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#types","content":"TypeScript permet de définir des types de variables. Cela permet de sécuriser le code et d'éviter les erreurs de type. "},{"title":"Boolean​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#boolean","content":"let isDone: boolean = false;  "},{"title":"Number​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#number","content":"let decimal: number = 6;  "},{"title":"String​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#string","content":"let color: string = &quot;bleu&quot;;  "},{"title":"Array​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#array","content":"let list: number[] = [1, 2, 3]; let list: Array&lt;number&gt; = [1, 2, 3];  "},{"title":"Tuple​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#tuple","content":"let x: [string, number]; x = [&quot;hello&quot;, 10];  "},{"title":"Enum​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#enum","content":"enum Color { Red, Green, Blue, } let c: Color = Color.Green;  "},{"title":"Any​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#any","content":"let notSure: any = 4; notSure = &quot;peut-être une chaîne de caractères&quot;; notSure = false; // ok, finalement c'est un booléen  "},{"title":"Void​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#void","content":"function warnUser(): void { console.log(&quot;Ceci est un message d'avertissement&quot;); }  "},{"title":"Null and Undefined​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#null-and-undefined","content":"let u: undefined = undefined; let n: null = null;  "},{"title":"Never​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#never","content":"function error(message: string): never { throw new Error(message); }  "},{"title":"Object​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#object","content":"declare function create(o: object | null): void; create({ prop: 0 }); // OK create(null); // OK create(42); // Error create(&quot;string&quot;); // Error create(false); // Error create(undefined); // Error  "},{"title":"Interfaces​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#interfaces","content":"Les interfaces permettent de définir des objets. interface Person { firstName: string; lastName: string; } function greeter(person: Person) { return `Hello, ${person.firstName} ${person.lastName}`; } let user = { firstName: &quot;Chuck&quot;, lastName: &quot;Norris&quot; }; document.body.textContent = greeter(user);  "},{"title":"Classes​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#classes","content":"Les classes permettent de définir des objets. class Greeter { greeting: string; constructor(message: string) { this.greeting = message; } greet() { return `Hello, ${this.greeting}`; } }  "},{"title":"Modules​","type":1,"pageTitle":"TypeScript","url":"/notebook-SNCF-P3/docs/front-end/typescript#modules","content":"Les modules permettent de séparer le code en plusieurs fichiers. // script1.ts export class SomeClass { // ... } // script2.ts import { SomeClass } from &quot;./script1&quot;;  "},{"title":"Lexique","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/lexique","content":"Lexique","keywords":""},{"title":"Processus de webdesign","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/maquettage/processus-webdesign","content":"","keywords":""},{"title":"Moodboard et style tile​","type":1,"pageTitle":"Processus de webdesign","url":"/notebook-SNCF-P3/docs/maquettage/processus-webdesign#moodboard-et-style-tile","content":" "},{"title":"Zoning et wireframe​","type":1,"pageTitle":"Processus de webdesign","url":"/notebook-SNCF-P3/docs/maquettage/processus-webdesign#zoning-et-wireframe","content":" "},{"title":"Découper son projet et définir des itérations​","type":1,"pageTitle":"Processus de webdesign","url":"/notebook-SNCF-P3/docs/maquettage/processus-webdesign#découper-son-projet-et-définir-des-itérations","content":"Le découpage du projet en itérations permet de définir des jalons et de prioriser les fonctionnalités à développer. On appelle MVP (Minimum Viable Product) la première version du produit qui contient les fonctionnalités essentielles. On garde en tête cette philosophie à chaque étape du projet, pour fournir au client un produit fonctionnel le plus rapidement possible.  "},{"title":"Introduction JavaScript","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/front-end/introduction-js","content":"","keywords":""},{"title":"Qu'est ce que le JavaScript ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#quest-ce-que-le-javascript-","content":"Ton voyage au sein de ce nouveau langage commence maintenant. Le JavaScript ou JS, va te permettre d'écrire des scripts permettant entre autre de rendre tes pages web dynamiques. C'est une langage &quot;léger, interprété, orienté objet&quot; (Mozilla Doc). "},{"title":"Un peu d'histoire​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#un-peu-dhistoire","content":"Le JavaScript a été créé en 1995 par Brendan Eich, un ingénieur de chez Netscape. Il a été créé en 10 jours et à l'origine il s'appelait Mocha, puis LiveScript avant de devenir JavaScript. Il a été créé pour permettre de rendre les pages web dynamiques et interactives. Il a été standardisé en 1997 par l'ECMA (European Computer Manufacturers Association) sous le nom de ECMAScript. "},{"title":"Où est utilisé le JavaScript ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#où-est-utilisé-le-javascript-","content":"Le JavaScript est utilisé dans de nombreux domaines, mais il est surtout connu pour être utilisé dans les pages web. Il est utilisé pour rendre les pages web dynamiques et interactives. Il est également utilisé pour créer des applications web, des applications mobiles, des jeux vidéos, des logiciels, des serveurs, des robots, des objets connectés, etc. "},{"title":"Qu'est ce qu'un script ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#quest-ce-quun-script-","content":"Un script est un ensemble d'instructions que tu vas donner à ton ordinateur pour qu'il puisse réaliser une tâche. Par exemple, si tu veux que ton ordinateur te dise bonjour, tu vas devoir lui donner une instruction pour qu'il puisse le faire. Tu vas devoir lui dire de t'afficher le message &quot;Bonjour&quot; à l'écran. "},{"title":"Comment fonctionne le JavaScript ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#comment-fonctionne-le-javascript-","content":"Le JavaScript est un langage de programmation qui va te permettre d'écrire des scripts. Ces scripts vont être interprétés par ton navigateur web. C'est à dire que ton navigateur va lire ton script et va l'exécuter. Il va lire ton script ligne par ligne et va exécuter les instructions que tu lui as donné. "},{"title":"Comment exécuter du JavaScript ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#comment-exécuter-du-javascript-","content":"Pour exécuter du JavaScript, tu vas devoir utiliser un navigateur web. Tu peux utiliser n'importe quel navigateur web, mais il est préférable d'utiliser un navigateur web spécialisé pour le développement web. "},{"title":"Comment lier un fichier JavaScript à une page web ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#comment-lier-un-fichier-javascript-à-une-page-web-","content":"Pour lier un fichier JavaScript à une page web, tu vas devoir utiliser la balise &lt;script&gt;&lt;/script&gt;. Tu vas devoir placer cette balise dans la balise &lt;head&gt;&lt;/head&gt; de ta page web. Tu vas devoir utiliser l'attribut src pour indiquer le chemin vers ton fichier JavaScript. &lt;!DOCTYPE html&gt; &lt;html lang=&quot;fr&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;Mon site web&lt;/title&gt; &lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Mon site web&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt;  "},{"title":"Comment executer du JavaScript en dehors du navigateur ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#comment-executer-du-javascript-en-dehors-du-navigateur-","content":"Il est aussi possible d'executer du JavaScript en dehors d'un navigateur web. Pour cela, tu vas devoir utiliser Node.js. Node.js est un environnement d'exécution JavaScript open source, multiplateforme. Il est basé sur le moteur JavaScript V8 de Chrome. info Installation de Node.js : https://nodejs.org/fr/download/ Prendre la version LTS (Long Term Support) adaptée au système d'exploitation du PC. "},{"title":"Comment écrire un commentaire en JavaScript ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#comment-écrire-un-commentaire-en-javascript-","content":"Pour écrire un commentaire en JavaScript, tu vas devoir utiliser // pour écrire un commentaire sur une seule ligne. Tu vas devoir utiliser /* */ pour écrire un commentaire sur plusieurs lignes. // Ceci est un commentaire sur une seule ligne /* Ceci est un commentaire sur plusieurs lignes */  "},{"title":"Comment afficher un message à l'écran ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#comment-afficher-un-message-à-lécran-","content":"Lorsque tu vas commencer à faire des tests et à développer tes premiers programmes, tu vas avoir besoin de connaitre le contenu de tes variables au cours son exécution. Pour cela tu peux utiliser la méthode log disponible sur l'objet console. Ce sera ton ami pendant un bon moment au cours de ton apprentissage du JS alors utilise le dès que tu en as besoin. Pour afficher un message à l'écran, tu vas devoir utiliser la fonction console.log(). Tu vas devoir placer ton message entre les parenthèses de la fonction console.log(). console.log(&quot;Bonjour&quot;);  astuce Tu peux aussi utiliser la méthode debugger qui te permettra de mettre un point d'arrêt ou alors de mettre un point d'arrêt et d'activer le débuggage dans VSCode pour voir l'état de tes variables et d'executer ton programme pas à pas. Très pratique pour comprendre le fonctionnement de ton programme. "},{"title":"Comment déclarer une variable ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#comment-déclarer-une-variable-","content":"Pour déclarer une variable, tu vas devoir utiliser le mot clé let suivi du nom de ta variable. Tu vas devoir utiliser le signe = pour affecter une valeur à ta variable. let prenom = &quot;John&quot;;  "},{"title":"Comment modifier la valeur d'une variable ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#comment-modifier-la-valeur-dune-variable-","content":""},{"title":"Données et variables​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#données-et-variables","content":""},{"title":"Types de données​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#types-de-données","content":"En informatique, les données sont le coeur et le carburant de nos ordinateurs. En JavaScript, on peut distinguer différents types de données que tu vas pouvoir utiliser pour créer tes programmes. undefined : valeur non définienull : valeur nulleboolean : type de donnée pouvant être vrai (true) ou fausse (false)string : chaîne/suite de caractèresnumber : nombre entier (integer,int) ou nombre décimal (float)object : ensemble de plusieurs variables associées grâce à la notation clé-valeurbigint : nombre entier supérieur à 2^53 (valeur max qu'un number peut stocker) Les 5 premiers types sont les plus importants car souvent utilisés, le dernier un peu moins mais il sera intéressant à connaitre pour maitriser parfaitement le fonctionnement du langage. "},{"title":"Qu'est ce qu'une variable ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#quest-ce-quune-variable-","content":"Lorsque tu vas créer un programme, tu vas avoir besoin de stocker des données. Par exemple, si tu veux créer un programme qui te permet de calculer la moyenne de tes notes, tu vas avoir besoin de stocker toutes tes notes. Pour pouvoir stocker et manipuler toutes ces données tu vas utiliser des variables. Tu peux te représenter une variable comme une boite ou un carton dans lequel tu vas ranger une valeur. Et pour mieux t'y retrouver tu vas donner un nom à cette variable. (Tu mets une étiquette sur ton carton pour savoir ce qu'il contient)  Ta variable te permettra d'utiliser directement son nom pour y faire référence et accéder à la valeur qu'elle stock. Tu pourras les utiliser pour procéder à des opérations mathématiques ou autre. Lorsque tu choisis un nom pour ta variable, il faut que tu essayes au maximum de respecter ces 3 règles : Le nom doit être le plus descriptif possibleÉvite les abréviations difficile à comprendreUtilise la convention de nommage camelCase (1ère lettre minuscule, pas d'espace, majuscule pour les prochains mot) attention Le nom de ta variable peut contenir des lettres, des chiffres ou des caractères spéciaux, mais ne peut pas contenir d'espace et ne peut pas commencer par un chiffre "},{"title":"Déclaration de variable​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#déclaration-de-variable","content":"Avant de pouvoir utiliser une variable pour y stocker quelque chose, tu dois d'abord faire naitre ta variable : on appelle cela déclarer une variable. (et comme une naissance, ça ne peut être fait qu'une fois par variable) Pour déclarer une variable tu dois utiliser le mot clé let ou var suivi du nom que tu auras choisi pour ta variable. let numberOfLearner; var simplonSchool;  info Le mot clé var est une ancienne façon de déclarer une variable. Il est toujours utilisé mais il est préférable d'utiliser le mot clé let qui est plus récent. le mot clé let déclare une variable dont la portée est le blocle mot clé var déclare une variable dont la portée est celle de la fonction englobante Il est possible de faire plusieurs déclarations en même temps en séparant les noms de variable par une virgule. let fruitList, ingredientList;  astuce Pour en savoir plus sur le mot clé let : Mozilla doc "},{"title":"Affectation de valeur​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#affectation-de-valeur","content":"Une fois ta variable créé, tu peux maintenant t'en servir. Pour pouvoir stocker une valeur dans une variable, il faut que tu utilises l'opérateur d'affectation =. Ici la donnée de type Number , de valeur 14 a été assignée à la variable numberOfLearner déclarée précédemment. numberOfLearner = 14;  Si un calcul est présent à la droite du signe = , l'opération est exécuter et le résultat du calcul est alors stocké dans la variable. numberOfLearner = 13 + 1;  Il est aussi possible d'affecter la valeur stockée dans une variable dans une autre variable. learners = numberOfLearner;  Il est possible de déclarer et d'initialiser la valeur d'une variable en une seule étape. let numberOfLearner = 24;  Il est aussi possible de faire plusieurs déclarations et initialisations en même temps. let numberOfLearner = 24, learners = 24;  "},{"title":"Constantes​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#constantes","content":"Pour éviter les réaffectation par erreur, tu peux utiliser des constantes. Elle fonctionnes comme les variables sauf que tu ne peux pas modifier leur valeur après affectation. const NOMBRE_SECONDES_HEURE = 3600; const HEURE_PAR_JOUR = 24;  💻 Exercice Calculer le nombre de secondes dans une année (utiliser des constantes pour déclarer toutes les valeurs fixes puis faites votre calcul) "},{"title":"Undefined​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#undefined","content":"Lorsqu'une variable est déclarée mais non initialisée, sa valeur par défaut est undefined, si tu effectue une opération mathématique sur une variable undefined le résultat sera NaN, &quot;Not a Number&quot; a guise d'erreur. Garde cela bien en tête, cela pourra t'aider à résoudre certains bug lorsqu'ils se présenteront ! "},{"title":"Opérations arithmétiques​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#opérations-arithmétiques","content":""},{"title":"Addition​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#addition","content":"A l'aide du l'opérateur + let panier = 34.1 + 22.5; // panier vaut 56.6 // autre exemple let prixArticle1 = 34, prixArticle2 = 22, nouvelArticle = 9; let valeurPrixPanier = prixArticle1 + prixArticle2; // valeurPrixPanier vaut 56 valeurPrixPanier = valeurPrixPanier + nouvelArticle; // valeurPrixPanier vaut 65 // est équivalent à ci-dessous en plus concis valeurPrixPanier += nouvelArticle; // valeurPrixPanier vaut 74 // autre exemple let nombreArticlePanier = 6; nombreArticlePanier++; // nombreArticlePanier vaut 7 // ceci equivaut à nombreArticlePanier = nombreArticlePanier + 1;  💻 Exercice Exercice d'addition : Imaginez que vous développiez une calculatrice. Écrivez un programme qui demande à l'utilisateur d'entrer le prix de deux articles dans un panier d'achat en ligne, puis affiche la somme totale à payer. "},{"title":"Soustraction​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#soustraction","content":"A l'aide de l'opérateur - let panier = 34 - 22; // panier vaut 12 // autre exemple let prixArticle1 = 34, prixArticle2 = 22, remise = 9; let valeurPrixPanier = prixArticle1 - remise; // valeurPrixPanier vaut 25 valeurPrixPanier = valeurPrixPanier - remise; // valeurPrixPanier vaut 16 //est équivalent à ci-dessous en plus concis valeurPrixPanier -= remise; // valeurPrixPanier vaut 7 // autre exemple let nombreArticlePanier = 6; nombreArticlePanier--; // nombreArticlePanier vaut 5 // ceci equivaut à nombreArticlePanier = nombreArticlePanier - 1;  💻 Exercice Exercice de soustraction : Supposons que vous travaillez sur un projet de gestion de stocks. Écrivez un programme qui demande à l'utilisateur d'entrer la quantité de stock initial d'un produit, puis la quantité vendue. Le programme affiche ensuite la quantité de stock restante. "},{"title":"Multiplication​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#multiplication","content":"A l'aide de l'opérateur * let montantAdditionRepas = nombreApprenant * prixFormuleMidi; // autre exemple nombreApprenant *= 2; // ceci equivaut à nombreApprenant = nombreApprenant * 2;  💻 Exercice Exercice de multiplication : Pensez à un programme de facturation pour un service. Écrivez un programme qui demande à l'utilisateur d'entrer le prix unitaire d'un produit et la quantité achetée, puis affiche le montant total à payer. "},{"title":"Division​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#division","content":"A l'aide de l'opérateur / let prixRepas = montantAdditionRepas / nombreApprenant; // autre exemple litreDeCafe /= 2; // ceci equivaut à litreDeCafe = litreDeCafe / 2;  💻 Exercice Exercice de division : Imaginez que vous développiez un convertisseur de devises. Écrivez un programme qui demande à l'utilisateur d'entrer un montant en euros, puis le taux de change pour une autre devise. Le programme affiche ensuite le montant équivalent dans cette devise. "},{"title":"Opérateur de reste​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#opérateur-de-reste","content":"A l'aide de l'opérateur % let rest = 11 % 2; // reste vaut 1  💻 Exercice Exercice de modulo : Écrivez un programme qui demande à l'utilisateur d'entrer un nombre entier, puis affiche si ce nombre est pair ou impair. "},{"title":"Chaines de caractères​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#chaines-de-caractères","content":""},{"title":"Utilisation​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#utilisation","content":"Le type string fait référence à une chaines de caractères. Une chaine de caractère est une série de 0 caractères ou plus écris entre des simples ou des doubles guillemets. let juicyFruit = 'Papaye'; // OU let juicyFruit = &quot;Papaye&quot;;  "},{"title":"Caractère d’échappement​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#caractère-déchappement","content":"Si dans une string tu as besoin d'utiliser des simples ou doubles guillemets tu peux toujours le spécifier pour que JS ne le considère pas comme la fin de ta string à l'aide d'un backslash \\ , on l'appelle caractère d'échappement. let sentence = &quot; \\&quot;Bonjour\\&quot;, dit Benji&quot;;  Il est aussi possible de combiner les deux types de guillemet et ainsi être dispenser de l'utilisation du backslash. Du moment que les guillemets de début et de fin sont cohérents. let sentence = ' &quot;Bonjour&quot;, dit Benji'; // OU let sentence = &quot; 'Bonjour', dit Benji&quot;;  Le caractère d'échappement peut avoir d'autres utilités. Il peut t'aider à représenter certains caractère comme une tabulation ou un retour à la ligne. \\n → Retour à la ligne\\t → Tabulation\\f → Saut de page "},{"title":"Concaténation​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#concaténation","content":"Pour construire une nouvelle string à l'aide de deux ou plus, tu peux utiliser l'opérateur + , cette opération est appelé la concaténation. let newString = &quot;Hello &quot; + &quot;coco&quot;; // &quot;Hello coco&quot; newString += &quot; !&quot;; // &quot;Hello coco !&quot; let myName = &quot;Jérémy&quot;; newString += &quot; C'est &quot; + myName; // &quot;Hello coco ! C'est Jérémy&quot;  astuce Avec la nouvelle syntaxe ES6, il est possible d'utiliser les backticks ` pour déclarer une string et d'utiliser les ${} pour insérer une variable dans une string. let myName = &quot;Jérémy&quot;; let newString = `Hello coco ! C'est ${myName}`; // &quot;Hello coco ! C'est Jérémy&quot; Pratique et plus lisible ! 💻 Exercice Exercice de concaténation : Écrivez un programme qui demande à l'utilisateur d'entrer son prénom et son nom, puis affiche un message disant : &quot;Bonjour, prénom nom !&quot;. (en replaçant prénom et nom par les valeurs saisies par l'utilisateur 😉) "},{"title":"Propriété string​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#propriété-string","content":"Il existe plusieurs propriétés pour les strings : myName.length : permet de récupérer le nombre de charactères dans une string myName[0]: accès aux éléments d'une string grâce à leur position dans la string. Attention, la première position est 0 et non 1. myName[myName.length - 1] : dernier lettre d'une string : 💻 Exercice Exercice de propriété string : Écrivez un programme qui demande à l'utilisateur d'entrer son prénom puis affiche la première lettre de son prénom, la dernière lettre de son prénom, ainsi que le nombre de lettre de son prénom. "},{"title":"Les tableaux​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#les-tableaux","content":""},{"title":"A quoi ça sert ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#a-quoi-ça-sert-","content":"Tu vas rapidement te rendre compte que tu vas avoir besoin de stocker beaucoup de valeurs pour pouvoir exécuter tes programmes. Et tu vas aussi avoir besoin de regrouper tes valeur de manières cohérente : c'est là qu'interviennent les array. "},{"title":"Déclaration​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#déclaration","content":"Pour pouvoir déclarer un tableau tu vas utiliser des crochets [ ] ou alors le constructeur d’objet new Array() let fruits = []; //ou let fruits = new Array();  "},{"title":"Déclaration et initialisation​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#déclaration-et-initialisation","content":"Pour pouvoir déclarer et initialiser certaines valeurs d’un tableau tu vas utiliser des crochets [ ] entre lesquels tu vas noter tes valeurs à stocker. let fruits = [&quot;papaye&quot;, &quot;cerise&quot;];  "},{"title":"Accès aux valeurs​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#accès-aux-valeurs","content":"Pour accéder à une valeur d'un tableau il te suffit de renseigner son index. danger En JS les index commence à 0, le premier élément d'un tableau ou la première lettre d'une string est donc placé à l'index 0. let fruits = [&quot;papaye&quot;, &quot;cerise&quot;, &quot;noix de coco&quot;]; console.log(fruits[0]); // &quot;papaye&quot; console.log(fruits[1]); // &quot;cerise&quot;  "},{"title":"Écriture des valeurs​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#écriture-des-valeurs","content":"let fruits = [&quot;papaye&quot;, &quot;cerise&quot;, &quot;noix de coco&quot;]; fruits[1] = &quot;framboise&quot;; // [&quot;papaye&quot;, &quot;framboise&quot;, &quot;noix de coco&quot;];  "},{"title":"Tableau à n dimension​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#tableau-à-n-dimension","content":"Parfois tu auras besoin de stocker des valeur dans un tableau, représentant des données en plusieurs dimension (des pions sur un échiquier par exemple). Il est possible de stocker un tableau dans un autre tableau. let snakeBoard = [ [&quot;🔴&quot;, &quot;🟩&quot;, &quot;🟩&quot;, &quot;🟩&quot;], [ &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;🟩&quot;], [ &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;🟩&quot;], [ &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;🟩&quot;] ]  Pour pouvoir accéder aux données de ce tableau il te suffit de renseigner l'index de la première dimension ainsi que l'index de la seconde dimension comme ceci : snakeBoard[0][0]; // &quot;🔴&quot; snakeBoard[0][3]; // &quot;🟩&quot;  💻 Exercice Exercice de tableau : Essaye de placer un pion rouge sur une case vide de l'exemple ci-dessus. Par exemple dans la case de la 2e colonne et 3e ligne. Pour obtenir ceci : let snakeBoard = [ [&quot;🔴&quot;, &quot;🟩&quot;, &quot;🟩&quot;, &quot;🟩&quot;], [ &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;🟩&quot;], [ &quot;&quot;, &quot;🔴&quot;, &quot;&quot;, &quot;🟩&quot;], [ &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;🟩&quot;], ];  "},{"title":"Manipulation de données​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#manipulation-de-données","content":"Tu as plusieurs méthodes disponible te permettant de manipuler les données d'un tableau. push() → ajouter une valeur à la fin de ton tableau fruits.push(&quot;mangue&quot;); // [&quot;papaye&quot;, &quot;framboise&quot;, &quot;noix de coco&quot;, &quot;mangue&quot;];  unshift() → ajoute une valeur en début de tableau let firstElement = fruits.unshift(&quot;raisin&quot;); // [&quot;raisin&quot;, &quot;papaye&quot;, &quot;framboise&quot;, &quot;noix de coco&quot;, &quot;mangue&quot;];  pop() → retire la dernière valeur d'un tableau et la renvoie let lastElement = fruits.pop(); // [&quot;raisin&quot;, &quot;papaye&quot;, &quot;framboise&quot;, &quot;noix de coco&quot;]; console.log(lastElement); // &quot;mangue&quot;  shift() → retire la première valeur d'un tableau et la renvoie let firstElement = fruits.shift(); // [&quot;papaye&quot;, &quot;framboise&quot;, &quot;noix de coco&quot;]; console.log(firstElement); // &quot;raisin&quot;  indexOf() → renvoie l'index de la première occurence d'une valeur dans un tableau let index = fruits.indexOf(&quot;framboise&quot;); // [&quot;papaye&quot;, &quot;framboise&quot;, &quot;noix de coco&quot;]; console.log(index); // 1  splice() → permet de retirer ou d'ajouter des éléments à un tableau let removedElements = fruits.splice(1, 2); // [&quot;papaye&quot;, &quot;framboise&quot;, &quot;noix de coco&quot;]; console.log(removedElements); // [&quot;framboise&quot;, &quot;noix de coco&quot;] console.log(fruits); // [&quot;papaye&quot;]  slice() → permet de copier une partie d'un tableau let copy = fruits.slice(1, 2); // [&quot;papaye&quot;, &quot;framboise&quot;, &quot;noix de coco&quot;]; console.log(copy); // [&quot;framboise&quot;] console.log(fruits); // [&quot;papaye&quot;, &quot;framboise&quot;, &quot;noix de coco&quot;]  💻 Exercice Exercice de manipulation de tableau : Essaye de chercher dans ce tableau de fruits l'emplacement d'une banane et retire la du tableau. Affiche le nouveau tableau dans la console. let fruits = [ &quot;papaye&quot;, &quot;framboise&quot;, &quot;noix de coco&quot;, &quot;banane&quot;, &quot;raisin&quot;, &quot;mangue&quot;, &quot;cerise&quot;, &quot;pomme&quot;, ];  "},{"title":"La magie des fonctions​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#la-magie-des-fonctions","content":""},{"title":"A quoi ça sert ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#a-quoi-ça-sert--1","content":"Lorsque tes programmes deviennent complexes et pour rester organiser dans ton code, il va falloir que tu le scindes en petites parties. Tu vas vite te rendre compte qu'une suite d'instructions va te servir à plusieurs endroits dans ton code. Pas besoin de copier-coller, pour cela car il y a les fonctions ! Elles te permettent d’exécuter à plusieurs endroit un même morceau de code, une même suite d'instructions. "},{"title":"Comment ça marche ?​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#comment-ça-marche-","content":" "},{"title":"Portée de ta variable​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#portée-de-ta-variable","content":"La portée désigne la visibilité ou l'accès ou l'utilisabilité d'une variable. Si une variable est déclarée à l'extérieur d'une fonction, on dit qu'elle a une portée globale. let favFruit = &quot;banana&quot;; function eatFruit() { let favFruit = &quot;cherry&quot;; console.log(favFruit); // &quot;cherry&quot; } console.log(favFruit); // &quot;banana&quot;  let favFruit = &quot;banana&quot;; function eatFruit() { console.log(favFruit); // &quot;banana&quot; } console.log(favFruit); // &quot;banana&quot;  "},{"title":"Prendre des décisions​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#prendre-des-décisions","content":""},{"title":"Fonctionnement​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#fonctionnement","content":"Dans ton code tu vas mettre en place des morceaux de code qui devront s'exécuter sous certaines condition. Pour cela il faut utiliser le mot clé if. if (maCondition) { console.log(&quot;La condition est true&quot;); }  Tu peux aussi mettre en place un second morceau de code qui sera exécuté si la première condition n'est pas satisfaite. if (maCondition) { console.log(&quot;La condition est true&quot;); } else { console.log(&quot;La condition est false&quot;); }  Tu peux aussi mettre en place une autre condition. if (maCondition) { console.log(&quot;La condition est true&quot;); } else if (autreCondition) { console.log(&quot;Autre condition est true&quot;); }  Et les trois en même temps. if (maCondition) { console.log(&quot;La condition est true&quot;); } else if (autreCondition) { console.log(&quot;Autre condition est true&quot;); } else { console.log(&quot;Aucune n'est true&quot;); }  ⚠️ Les tests sont exécutés dans l'ordre d'écriture, l'ordre est dont important. "},{"title":"Opérateurs de comparaison​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#opérateurs-de-comparaison","content":"L'instruction if sera exécutée si la condition est true , elle sera ignorée si la condition est false. Tu peux aussi procéder à des comparaisons grâce à différents opérateurs de comparaisons. == : égal partiel (valeur)=== : égal total (type et valeur)&gt; : supérieur&gt;= : supérieur ou égal&lt; : inférieur&lt;= : inférieur ou égal!= : différent de if (age &gt;= 18) { console.log(&quot;Majeur&quot;); } else { console.log(&quot;Mineur&quot;); } 4 == &quot;4&quot;; // true 4 === &quot;4&quot;; // false  💻 Exercice Crée une fonction isAdult qui prend en paramètre l'année de naissance d'un utilisateur et qui affiche dans la console si l'utilisateur est adulte ou non. "},{"title":"Opérateurs logiques​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#opérateurs-logiques","content":"Tu peux combiner plusieurs tests à l'aide de ces opérateurs: &amp;&amp; : ET|| : OU! : NON let nombreCafeAvale = 16, codeBug = false; if (nombreCafeAvale &gt; 1) { if (!codeBug) { console.log(&quot;Super journée&quot;); } } else { console.log(&quot;Dure journée&quot;); } // Se transforme en if (nombreCafeAvale &gt; 1 &amp;&amp; !codeBug) { console.log(&quot;Super journée&quot;); } else { console.log(&quot;Dure journée&quot;); }  💻 Exercice de mise en pratique sur les fonctions Dépot Github  "},{"title":"Exercices​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#exercices","content":""},{"title":"String​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#string","content":"💻 Exercice Encodeur décodeur Validation d'heure "},{"title":"Tableau + Conditions​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#tableau--conditions","content":"💻 Exercice Fruit tracker  "},{"title":"Switch case​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#switch-case","content":"Si j’ai plus de 4 if ... else à la suite, mieux vaut passer sur un switch...case (si tes tests sont compatibles car tu ne peux tester que l’égalité des valeurs). Il est important de remarquer que les valeurs sont testées avec ===! switch (nombreCafeAvale) { case 1: console.log(&quot;Tu n'as bu qu'un café...&quot;); break; case 2: console.log(&quot;Tu as bu 2 cafés.&quot;); break; case 3: console.log(&quot;Tu as bu assez de café !&quot;); break; case 4: console.log(&quot;Stop maintenant !&quot;); break; default: console.log(&quot;Fin de transmission&quot;); break; }  Il est possible de combiner plusieurs tests comme ceci. Tant qu'un break n'est pas rencontrés, le code du switch continue d'être exécuté. ci dessous, le 3, 4 et 5 produiront le même résultat. switch (nombreCafeAvale) { case 1: case 2: console.log(&quot;Tu as 1 ou 2 cafés.&quot;); break; case 3: case 4: case 5: console.log(&quot;Tu as bu entre 3 et 5 cafés, stop !&quot;); break; default: console.log(&quot;Fin de transmission&quot;); break; }  "},{"title":"Tu radotes ! (Les boucles)​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#tu-radotes--les-boucles","content":""},{"title":"Boucles for​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#boucles-for","content":"Si l’on connaît le nombre d’itération et/ou que l'on veut avoir le contrôle sur le début et la fin de notre boucle. let apprenants = [&quot;Abdoulaye&quot;, &quot;Alicia&quot;, &quot;Abdoul-Nasser&quot;, &quot;Caroline&quot;]; for (let index = 0; index &lt; apprenants.length; index++) { console.log(&quot;Bonjour &quot; + apprenants[index]); }  💻 Exercice Exercice de table de multiplication : Écrivez un programme qui demande à l'utilisateur d'entrer un nombre entier positif, puis utilise une boucle pour afficher la table de multiplication de ce nombre jusqu'à 10. "},{"title":"Boucle for...of​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#boucle-forof","content":"Pour itérer sur tout mon tableau for (const apprenant of apprenants) { console.log(&quot;Bonjour &quot; + apprenant); }  💻 Exercice Exercice de calcul de la moyenne : Demandez à l'utilisateur d'entrer plusieurs nombres, puis utilisez une boucle pour calculer et afficher la moyenne de ces nombres. "},{"title":"Boucle for...in​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#boucle-forin","content":"Pour itérer sur tout mon tableau, plutôt utiliser pour parcourir les différentes propriétés d'un objet. for (const index in apprenants) { console.log(&quot;Bonjour &quot; + apprenants[index]); }  "},{"title":"Boucle while​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#boucle-while","content":"Si l'on ne connait pas le nombre d'itération let nombreApprenant = 0; while (nombreApprenant &lt; 24) { nombreApprenant++; } console.log(&quot;La promo est complète&quot;);  danger Attention aux boucles infinies ! lorsque tu utilises des boucles while si ta condition de sortie ne passe jamais à false ton code s’exécutera indéfiniment Il existe une variante à cette boucle : la do … while . Elle s’exécutera au moins une fois étant donné que la condition est vérifier à la fin du bloc. let nombreApprenant = 0; do { nombreApprenant++; } while (nombreApprenant &lt; 24); console.log(&quot;La promo est complète&quot;);   💻 Exercice Exercice Calcul d'intérêts composés : Vous avez déposé un montant spécifique d'euros dans votre compte bancaire. Chaque année, le solde augmente au même taux de croissance. Découvrez combien de temps il faudra pour que votre solde dépasse un seuil spécifique avec l'hypothèse que vous ne faites aucun dépôt supplémentaire. Exemple : Pour dépôt = 100, taux = 20 et seuil = 170, la sortie doit être DepositProfit(dépôt, taux, seuil) =&gt; 3 Explication : Chaque année, le montant sur votre compte augmente de 20% (Et oui généreux ce banquier !). Cela signifie que tout au long des années, votre solde serait : année 0 : 100 € année 1 : 120 € année 2 : 144 € année 3 : 172,8 € function DepositProfit(deposit, rate, threshold) { return 0; }   "},{"title":"Exercices d'algorithmie​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#exercices-dalgorithmie","content":"💻 Exercice Ecrire une fonction permettant de trouver le plus grand nombre dans le tableau et de le retourner. function LargestNumber() { let tab = [2, 4, -1, 28, 3, -10, 29, 12, 21 - 3]; return; }  💻 Exercice Ecrire un fonction qui va iteré de 1 à 100 et : Pour toute les multiples de 3 afficher dans la console le mot 'Fizz'Pour toute les multiples de 5 afficher dans la console le mot 'Buzz'Pour toute les multiples de 3 et 5 afficher dans la console le mot 'FizzBuzz' function FizzBuzz() {}  💻 Exercice Ecrire une fonction qui prendra en paramètre une année et qui retrounera le siècle auquel elle appartient. Exemple : CenturyFromYear(1905) =&gt; 20 CenturyFromYear(1700) =&gt; 17 function CenturyFromYear(year) { return; }  💻 Exercice Ecrire une fonction qui prendre en paramètre un mot composé de lettre minuscule et qui lui donnera un score en fonction du nombre de voyelle et de consonne. 1 consonne = 2 points 1 voyelle = 1 point Exemple : wordScore('abcde') = 8 function wordScore(inputString) { return 0; }  💻 Exercice Suite de Fibonacci : La suite de Fibonacci est une suite d'entiers dans laquelle chaque terme est la somme des deux termes qui le précèdent. Elle commence généralement par les termes 0 et 1 (parfois 1 et 1) et ses premiers termes sont : 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, etc. Écrivez une fonction qui prend un entier n et renvoie le n-ième terme de la suite de Fibonacci. function fibonacci(n) { return 0; }  💻 Exercice La suite de la suite de Fibonacci : Écrivez une fonction qui prend un entier n en paramètre et renvoie la somme des n premiers termes pairs de la suite de Fibonacci. function sumFibonacci(n) { return 0; }  💻 Exercice En fonction d'un entier positif num, retournez la somme de tous les nombres impairs de Fibonacci qui sont inférieurs ou égaux à num. Par exemple, SumOddFiboNumber(10) doit retourner 10 car tous les nombres impairs de Fibonacci inférieurs ou égaux à 10 sont 1, 1, 3 et 5. Exemples : SumOddFiboNumber(10) =&gt; 10 SumOddFiboNumber(1000) =&gt; 1785 SumOddFiboNumber(4000000) =&gt; 4613732 function SumOddFiboNumber(numMax) { return 0; }  💻 Exercice Ecrire une fonction qui va retourner les 5 premiers nombres heureux function HappyNumber() {}  "},{"title":"Les objets​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#les-objets","content":"Cette structure de données va te permettre de représenter des objets du monde réel. Tout comme un objet du monde réel possède des caractéristique, un objet JS possède des propriétés. Une propriété est une association clé et valeur. "},{"title":"Déclaration​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#déclaration-1","content":"let manga = {}; // OU let manga = new Object();  "},{"title":"Initialisation​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#initialisation","content":"Pour initialiser les propriétés d'un objet il te suffit d'utiliser un point suivi du nom de la propriété que tu veux créer sur l'objet pour pouvoir lui associé une valeur et ainsi l'initialiser. manga.title = &quot;L'attaque des titans&quot;; manga.author = &quot;Hajime Isayama&quot;; manga.year = 2009; manga.inProgress = true;  Tu peux aussi accéder aux différentes propriétés d'un objet avec cette notation. console.log(manga.title); // &quot;L'attaque des titans&quot;  "},{"title":"Déclaration et initialisation​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#déclaration-et-initialisation-1","content":"Tu peux aussi utiliser la syntaxe littérale ci dessous qui te permet de déclarer et d'initialiser directement les propriétés d'un objet. let manga = { title: &quot;L'attaque des titans&quot;, author: &quot;Hajime Isayama&quot;, year: 2009, inProgress: true, };  astuce Accéder à la valeur d’une propriété d’un objet de manière dynamique : const user = { name: &quot;Coco&quot;, age: 29, }; user.name; //&quot;Coco&quot; user[&quot;name&quot;]; //&quot;Coco&quot; let nomDeMaProp = &quot;name&quot;; user[nomDeMaProp]; //&quot;Coco&quot; nomDeMaProp = &quot;age&quot;; //&quot;age&quot; user[nomDeMaProp]; //29  Exercice Ecrire une fonction qui va donner la note correspondant à chaque élève au sein du tableau et &lt; 60 : E &lt; 70 : D &lt; 80 : C &lt; 90 : B &lt; 100 : A function NoterLesEleve() { let eleves = [ { Prénom: &quot;Luna&quot;, Point: 73, Note: &quot;&quot;, }, { Prénom: &quot;Joe&quot;, Point: 80, Note: &quot;&quot;, }, { Prénom: &quot;Thomas&quot;, Point: 79, Note: &quot;&quot;, }, { Prénom: &quot;Raman&quot;, Point: 45, Note: &quot;&quot;, }, { Prénom: &quot;Alexandra&quot;, Point: 92, Note: &quot;&quot;, }, { Prénom: &quot;Jeanne&quot;, Point: 42, Note: &quot;&quot;, }, ]; return eleves; }  "},{"title":"","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js##","content":""},{"title":"Ressources​","type":1,"pageTitle":"Introduction JavaScript","url":"/notebook-SNCF-P3/docs/front-end/introduction-js#ressources","content":"👉 Cours Js Data Structure FreeCodeCamp 👉 Site référence cours javascript.info 👉 10 jeux pour apprendre JS "},{"title":"La maquette","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/maquettage/web-design","content":"","keywords":""},{"title":"Les étapes​","type":1,"pageTitle":"La maquette","url":"/notebook-SNCF-P3/docs/maquettage/web-design#les-étapes","content":"Pour réaliser une belle maquette, il faut obligatoirement passer par plusieurs étapes. La première étape est peu précise et rapide à réaliser, la dernière est tout le contraire. N'oubliez pas que dessiner une maquette est avant tout construire une interface fonctionnelle pour l'utilisateur. Ne vous laissez pas distraire par la forme (le bling-bling) dès le début, vous allez perdre beaucoup de temps et vous risquez de passez à côté de la question essentielle : A quoi sert mon écran ? Privilégiez donc l'ergonomie au graphisme. Aussi il est impératif de mettre le client dans la boucle dès le début et de bien lui expliquer ces différentes étapes. "},{"title":"Le zoning​","type":1,"pageTitle":"La maquette","url":"/notebook-SNCF-P3/docs/maquettage/web-design#le-zoning","content":"Le zoning est la première étape. Nous allons découper notre écran en blocs (ou boîtes) vides. Il s'agit d'une mise en page grossière sans esthétique. Les proportions ne sont pas nécessairement respectées. Très peu d'informations apparaissent. Graphiquement, nous sommes dans une fidélité basse. Le but est de montrer les grandes fonctionnalités et les principales zones du site. Travaillez uniquement en nuances de gris : une pour indiquer les blocs présents sur toutes les pages et une autre pour le spécifique à la page. Vous pouvez ajouter d'autres nuances, mais en aucun de la couleur. Vous allez dessiner des pages, mais pour quelle largeur et quelle hauteur d'écrans ? Vous faites un site responsive, adaptatif, pour un écran particulier, pour plusieurs écrans ? Ce sont des questions aux quelles vous devez répondre avant de vous lancer dans le dessin. Un site responsive est un site web qui a une seule url et donc affiche les mêmes données. Par contre la disposition des zones sera différente selon la taille des écrans, voir nous déciderons de la disparition visuelle de certaines informations si l'écran est trop petit. De nos jours, les utilisateurs consomment de plus en plus de portable et donc souvent, nous devons concevoir l'application d'abord pour le mobile puis la tablette et enfin l'ordinateur. Cependant, si vous écrivez une application qui sera principalement utilisée sur ordinateur, vous dessinerez d'abord sur le grand écran. Une application adaptative est une application qui affiche des informations différentes selon l'écran, et donc demande du développement spécifique. Il faut donc choisir les écrans sur les quels on voudra que notre application fonctionne. On ne pourra pas tous les faire. Une application adaptative demande beaucoup plus d'énergie. Parfois, vous ferez une application que pour un seul écran, un ordinateur par exemple. Cette situation est de plus en plus rare dans la vie d'un développeur. Prenez connaissance du Responsive Web Design et du Mobile First design et de l'Adaptive Design avant de vous lancez dans le design. Quand nous dessinons les zoning, le dessin doit être rapide et peu précis. Il est inutile d'utiliser un logiciel compliqué. Le zoning ci-dessous est réalisé sous LibreOffice Draw.  Vous avez dû remarquer les colonnes vertes en arrière plan. En fait, je sais que développerai un site web responsive que que j'utiliserai le framework Bootstrap. J'ai donc dessiné les 12 colonnes avec les gouttières, comme cela je vais gagner un peu de temps lors du développement. Vous pouvez télécharger ce zoning pour bootstrap. "},{"title":"Le wireframe​","type":1,"pageTitle":"La maquette","url":"/notebook-SNCF-P3/docs/maquettage/web-design#le-wireframe","content":"Le wireframe est la maquette fil de fer qui vient compléter le zoning. Chaque bloc s'enrichit des éléments qui le composent : texte, image, zone de saisie, bouton, etc... On ne travaille pas l'aspect visuel : ni la taille, ni la couleur, ni l'alignement. Graphiquement nous sommes sur une fidélité moyenne. On définit l'organisation des éléments, et donc le placement des éléments est important. Graphiquement, nous sommes dans une fidélité moyenne. C'est sur le wireframe que vous tomberez dans le piège du joli. Un wireframe élaboré avec de belles photos, des couleurs, un style, nous détourne de l'ergonomie et des fonctionnalités. Un wireframe répond à la question : A quoi sert cet écran ? Souvent nous retrouvons des wireframes monochrome du style écrit à la main. Voici deux écrans dessinés à la main : Et voici le résultat une fois scannés et importé dans le logiciel uizard. Nous avons apporté quelques retouches :  "},{"title":"Le mockup​","type":1,"pageTitle":"La maquette","url":"/notebook-SNCF-P3/docs/maquettage/web-design#le-mockup","content":"Le mockup est dynamique est navigable. A ce moment nous pouvons transformer le wireframe en reproduction fidèle, en ajoutant des photos, des feuilles de style. Nous alignons les éléments de l'écran. Nous ajoutons des actions sur les éléments, nous naviguons entre les pages. Il permet de se projeter davantage. Graphiquement, nous sommes dans une fidélité haute. Voici le résultat des deux écrans précédents : Ces deux écrans transformés en mockup grâce au logiciel uizard "},{"title":"Le prototype​","type":1,"pageTitle":"La maquette","url":"/notebook-SNCF-P3/docs/maquettage/web-design#le-prototype","content":"Le prototype devient fonctionnel. Les tests sont poussés plus avant. C'est le prototype qui est mis en avant pour vendre le produit aux investisseurs. le prototype n'est pas destiné au développeur, et donc nous ne développerons pas ce sujet. "},{"title":"Compléments​","type":1,"pageTitle":"La maquette","url":"/notebook-SNCF-P3/docs/maquettage/web-design#compléments","content":""},{"title":"Le design system​","type":1,"pageTitle":"La maquette","url":"/notebook-SNCF-P3/docs/maquettage/web-design#le-design-system","content":"Pour uniformiser le visuel de l'application, durant de nombreuses années, nous avons utiliser la charte graphique qui est très rigide. Aujourd'hui, avec les outils modernes de conception et l'Agility, nous parlons de Design System. Ce concept a été développé par un Web Designer Brad Frost. Ce concept est utilisé dans les outils modernes comme Figma.  Sketchnote tiré du billet Medium d'Audrey Hacq. Je vous conseille la lecture de ce bouquin, Atomic Design par Brad Frost pour bien comprendre ce concept. "},{"title":"Quelques notions UI​","type":1,"pageTitle":"La maquette","url":"/notebook-SNCF-P3/docs/maquettage/web-design#quelques-notions-ui","content":"Le design UI est un métier à part entière qui demande une formation plus longue que la lecture de quelques articles. Dans ce chapitre, nous n'abordons que quelques notions qui nous permettent de dessiner une interface qui n'aura pas le look d'une application des années 2000. Voici quelques articles : Skeuomorphisme, Flat design, Material Design. Ces termes ne signifient rien pour vous, lisez ces 4 premiers chapitres du cours sur OpenClassroom.Tout comprendre de l’ui designLes tendance UI de l'année 2021 Copyright Le Dev Design Book de Tiankod "},{"title":"Les node modules","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/outils/node-modules","content":"","keywords":""},{"title":"Qu'est-ce qu'un module ?​","type":1,"pageTitle":"Les node modules","url":"/notebook-SNCF-P3/docs/outils/node-modules#quest-ce-quun-module-","content":"Un module est un ensemble de fichiers JavaScript (ou TypeScript) qui peuvent être importés dans un autre fichier JavaScript (ou TypeScript). "},{"title":"Fichier package.json​","type":1,"pageTitle":"Les node modules","url":"/notebook-SNCF-P3/docs/outils/node-modules#fichier-packagejson","content":"Le fichier package.json est un fichier qui contient les informations du projet et la liste des modules utilisés. Il est initialiser avec la commande suivante : npm init  "},{"title":"Installation d'un module​","type":1,"pageTitle":"Les node modules","url":"/notebook-SNCF-P3/docs/outils/node-modules#installation-dun-module","content":"Pour installer un module, il faut utiliser le gestionnaire de paquets npm : npm install nom-du-module  ou alors sa version raccourcie : npm i nom-du-module  "},{"title":"Utilisation​","type":1,"pageTitle":"Les node modules","url":"/notebook-SNCF-P3/docs/outils/node-modules#utilisation","content":"Pour utiliser un module, il faut l'importer dans le fichier JavaScript (ou TypeScript) où on souhaite l'utiliser : import { nomVariable } from &quot;nom-du-module&quot;;  "},{"title":"Planning","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/planning","content":"","keywords":""},{"title":"Module 1 : Introduction au développement web​","type":1,"pageTitle":"Planning","url":"/notebook-SNCF-P3/docs/planning#module-1--introduction-au-développement-web","content":"info Légendes : Louis -&gt; OrangeJérémy -&gt; Bleu  "},{"title":"Visual Studio Code","type":0,"sectionRef":"#","url":"/notebook-SNCF-P3/docs/outils/vs-code","content":"","keywords":""},{"title":"Extensions​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#extensions","content":""},{"title":"ESLint​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#eslint","content":"Permet de vérifier la syntaxe de notre code JavaScript.Lien d'installation Configuration​ Dans un fichier .eslintrc.json à la racine de notre projet, on peut configurer ESLint comme ceci : { &quot;env&quot;: { &quot;browser&quot;: true, &quot;es2021&quot;: true, &quot;node&quot;: true }, &quot;extends&quot;: &quot;eslint:recommended&quot;, &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: &quot;latest&quot;, &quot;sourceType&quot;: &quot;module&quot; }, &quot;rules&quot;: {} }  "},{"title":"French Language Pack for Visual Studio Code​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#french-language-pack-for-visual-studio-code","content":"Permet d'avoir l'interface en français.Lien d'installation "},{"title":"Git Graph​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#git-graph","content":"Permet de visualiser l'historique de notre projet Git et d'accéder à certaines fonctionnalités de de manière graphique.Lien d'installation "},{"title":"Live server​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#live-server","content":"Permet de lancer un serveur local pour visualiser notre site web. (fonctionne simplement avec notre code vanilla HTML/CSS/JS mais pas avec Angular)Lien d'installation "},{"title":"Live Share​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#live-share","content":"Permet de partager notre éditeur de code avec d'autres personnes et de coder à plusieurs en même temps.Lien d'installation "},{"title":"Materail Icon Theme​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#materail-icon-theme","content":"Permet d'avoir des icônes plus jolies dans notre explorateur de fichiers. Pratique pour s'y retrouver plus facilement.Lien d'installation "},{"title":"Polacode​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#polacode","content":"Permet de prendre des captures d'écran de notre code.Lien d'installation "},{"title":"PostgreSQL​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#postgresql","content":"Permet d'avoir un client PostgreSQL directement dans VS Code. Pratique pour tester des requêtes SQL.Lien d'installation "},{"title":"Prettier​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#prettier","content":"Permet d'avoir un client PostgreSQL directement dans VS Code. Pratique pour tester des requêtes SQL.Lien d'installation Configuration​ Dans un fichier .prettierrc à la racine de notre projet, on peut configurer Prettier comme ceci : { &quot;trailingComma&quot;: &quot;es5&quot;, &quot;tabWidth&quot;: 2, &quot;semi&quot;: true, &quot;singleQuote&quot;: false }  "},{"title":"Pretty TypeScript Errors​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#pretty-typescript-errors","content":"Permet d'avoir des messages d'erreurs plus clairs et plus jolis.Lien d'installation "},{"title":"Thunder Client​","type":1,"pageTitle":"Visual Studio Code","url":"/notebook-SNCF-P3/docs/outils/vs-code#thunder-client","content":"Permet de faire des requêtes HTTP directement dans VS Code.Lien d'installation "}]